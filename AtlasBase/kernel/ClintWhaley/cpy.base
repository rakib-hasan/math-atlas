@ROUT ATL_cpammC12x4_aXbX.c
#include <stddef.h>
#ifdef SREAL
   #define TYPE float
#else
   #define TYPE double
#endif
#ifdef ATL_VLEN
   #undef ATL_VLEN
#endif
#include "atlas_prefetch.h"
// HERE vl=1, mu=12, nu=4 bs=48
void ATL_USERCPMM
(
   const size_t M,      /* number of rows in A */
   const size_t N,      /* number of columns in A */
   const TYPE alpha,  /* scalar for b */
   const TYPE *b,     /* matrix stored in 12x4-major order */
   const TYPE beta,   /* scalar for C */
   TYPE *C,           /* matrix to be copied to access-major format */
   const size_t ldc     /* stride between row elements */
)
{
   const unsigned int mf = M/12, nf = N/4;
   const unsigned int m = mf*12, n = nf*4, mr = M-m, nr = N-n;
   const unsigned int pansz = (nr) ? (nf+1)*48 : nf*48; // bs=48
   const size_t incC = ldc*4 - m;
   unsigned int i, j;
   TYPE *C0=C, *C1=C0+ldc, *C2=C1+ldc, *C3=C2+ldc;
   for (j=nf; j; j--, b += 48)
   {
      const TYPE *p = b;
      for (i=mf; i; i--, p += pansz)
      {
         ATL_pfl1W(p+pansz);
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C2[11] = beta*C2[11] + alpha*p[35];
            C2 += 12;
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
            C3[10] = beta*C3[10] + alpha*p[46];
            C3[11] = beta*C3[11] + alpha*p[47];
            C3 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
            C2[0] = beta*C2[0] + alpha*p[24];
            C3[0] = beta*C3[0] + alpha*p[36];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
            C3[10] = beta*C3[10] + alpha*p[46];
         break;
      default:;
      }
      C0 += incC;
      C1 += incC;
      C2 += incC;
      C3 += incC;
   }
   switch(nr)
   {
      const TYPE *p;
   case 1:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
         break;
      default:;
      }
      break;
   case 2:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
         break;
      default:;
      }
      break;
   case 3:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C2[11] = beta*C2[11] + alpha*p[35];
            C2 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
            C2[0] = beta*C2[0] + alpha*p[24];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
         break;
      default:;
      }
      break;
   default:;
   }
}
@ROUT ATL_skblk2C3x3.c
#include "atlas_simd.h"
#ifdef SREAL
   #define ATL_vmskld(v_, p_, m_) v_ = _mm256_maskload_ps(p_, m_)
   #define ATL_vmskst(p_, v_, m_) _mm256_maskstore_ps(p_, m_, v_)
   #define TYPE float
   #define BSZ 16
#else
   #define ATL_vmskld(v_, p_, m_) v_ = _mm256_maskload_pd(p_, m_)
   #define ATL_vmskst(p_, v_, m_) _mm256_maskstore_pd(p_, m_, v_)
   #define TYPE double
   #define BSZ 12
#endif
#ifdef BETAN1
   #define BETAN
#endif
#ifdef ALPHAN1
   #define ALPHAN
#endif
// HERE vl=4, mu=3, nu=3 bs=12
void ATL_USERCPMM
(
   const size_t M,      /* number of rows in A */
   const size_t N,      /* number of columns in A */
   const TYPE alpha,    /* scalar for b */
   const TYPE *b,       /* matrix stored in 3x3-major order */
   const TYPE beta,     /* scalar for C */
   TYPE *C,             /* matrix to be copied to access-major format */
   const size_t ldc     /* stride between row elements */
)
{
   const unsigned int mf = M/3, nf = N/3;
   const unsigned int m = mf*3, n = nf*3, mr = M-m, nr = N-n;
   unsigned int pansz = BSZ;
   const size_t incC0 = (ldc+1)*3;
   unsigned int i, j;
   TYPE *C0=C, *C1=C0+ldc, *C2=C1+ldc;
   #ifdef SREAL
      const __m256i m0={-1L,0xFFFFFFFFL,0L,0L}, 
         m1={0xFFFFFFFF00000000L,0xFFFFFFFFL,0L,0L}, m2={0L, 0xFFFFFFFFL,0L,0L};
   #else
      const __m256i m0={-1,-1,-1,0}, m1={ 0,-1,-1,0}, m2={ 0, 0,-1,0};
   #endif
   #if defined(ALPHAN) || defined(BETAN)
      TYPE NONE=(-1.0);
   #endif
   #if defined(ALPHAX) || defined(ALPHAN)
      ATL_VTYPE valpha;
   #endif
   #if defined(BETAX) || defined(BETAN)
      ATL_VTYPE vbeta;
   #endif

   @whiledef sc alpha beta
   #ifdef @up@(sc)N
      ATL_vbcast(v@(sc), &NONE);
   #elif defined(@up@(sc)X)
      ATL_vbcast(v@(sc), &@(sc));
  #endif
  @endwhile

   for (j=0; j < nf; j++)
   {
      const TYPE *p = b;
      unsigned int psz = pansz+BSZ, incC = incC0 - (mf-j)*3;
      ATL_VTYPE c0, b0;

      @whiledef jj 2 1 0
      @iexp jof @(jj) 3 *
      #ifdef BETA0
         ATL_vmskld(c0, p+@(jof), m@(jj));
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmul(c0, c0, valpha);
         #endif
      #elif defined(ALPHA1) && (defined(BETAX) || defined(BETAN))
         ATL_vmskld(c0, p+@(jof), m@(jj));
         ATL_vmskld(b0, C@(jj), m@(jj));
         ATL_vmac(c0, b0, vbeta);
      #else
         ATL_vmskld(c0, C@(jj), m@(jj));
         #if defined(BETAX) || defined(BETAN)
            ATL_vmul(c0, c0, vbeta);
         #endif
         ATL_vmskld(b0, p+@(jof), m@(jj));
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmac(c0, b0, valpha);
         #else
            ATL_vadd(c0, c0, b0);
         #endif
      #endif
      ATL_vmskst(C@(jj), c0, m@(jj));
      C@(jj) += 3;
      @endwhile
      p += pansz;
      for (i=j+1; i < mf; i++, p += psz, psz += BSZ)
      {
      @whiledef jj 2 1 0
      @iexp jof @(jj) 3 *
      #ifdef BETA0
         ATL_vmskld(c0, p+@(jof), m0);
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmul(c0, c0, valpha);
         #endif
      #elif defined(ALPHA1) && (defined(BETAX) || defined(BETAN))
         ATL_vmskld(c0, p+@(jof), m0);
         ATL_vmskld(b0, C@(jj), m0);
         ATL_vmac(c0, b0, vbeta);
      #else
         ATL_vmskld(c0, C@(jj), m0);
         #if defined(BETAX) || defined(BETAN)
            ATL_vmul(c0, c0, vbeta);
         #endif
         ATL_vmskld(b0, p+@(jof), m0);
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmac(c0, b0, valpha);
         #else
            ATL_vadd(c0, c0, b0);
         #endif
      #endif
      ATL_vmskst(C@(jj), c0, m0);
      C@(jj) += 3;
      @endwhile
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[3];
            C2[0] = beta*C2[0] + alpha*p[6];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[3];
            C1[1] = beta*C1[1] + alpha*p[4];
            C2[0] = beta*C2[0] + alpha*p[6];
            C2[1] = beta*C2[1] + alpha*p[7];
         break;
      default:;
      }
      C0 += incC;
      C1 += incC;
      C2 += incC;
      pansz += BSZ;
      b += pansz;
   }
   switch(nr)
   {
      const TYPE *p;
   case 1:
      p = b;
            C0[0] = beta*C0[0] + alpha*p[0];
      break;
   case 2:
      p = b;
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[1] = beta*C1[1] + alpha*p[4];
      break;
   default:;
   }
}
@ROUT ATL_cpAN2blk4_avx2.c ATL_cpAN2blk12_avx2.c
#include "atlas_misc.h"
#ifdef ALPHAN1
   #define ALPHAN 1
#endif
#ifdef SREAL
   #include <immintrin.h>
   #define ATL_VTYPE __m128
@skip   #define ATL_vild(v_, p_) v_ = _mm_loadu_si128((void*)p_)
   #define ATL_vgather(v_, p_, i_) v_ = _mm256_i64gather_ps(p_, i_, 4)
   #define ATL_vmskgat(v_, p_, i_, m_) v_ = _mm256_mask_i64gather_ps(z0, p_, i_, m_, 4)
   #define ATL_vuld(v_, p_) v_ = _mm_loadu_ps(p_)
   #define ATL_vmul(d_, s1_, s2_) d_ =  _mm_mul_ps(s1_, s2_)
   #define ATL_vst(p_, v_) _mm_store_ps(p_, v_)
   #define ATL_vzero(v_) v_ = _mm_setzero_ps()
@skip   #define ATL_rnone -1.0f
#else
@skip   #define ATL_vild(v_, p_) v_ = _mm256_loadu_si256((void*)p_)
   #define ATL_VLEN 4
   #include "atlas_simd.h"
   #undef ATL_VLEN
   #define ATL_vgather(v_, p_, i_) v_ = _mm256_i64gather_pd(p_, i_, 8)
   #define ATL_vmskgat(v_, p_, i_, m_) \
      v_ = _mm256_mask_i64gather_pd(z0, p_, i_, m_, 8)
@skip   #define NONE -1.0
#endif
void ATL_USERCPMM(const size_t K, const size_t D, const SCALAR alpha,
                  const TYPE *A, const size_t lda, TYPE *b)
{
   
   const __m256i off = {0, lda, lda<<1, (lda<<1)+lda};
@ROUT ATL_cpAN2blk12_avx2.c
   const size_t D12=D/12, Dr=D-12*D12, lda4=lda<<2, lda12=(lda4+(lda<<1))<<1;
   const TYPE *A4=A+lda4, *A8=A4+lda4;
@ROUT ATL_cpAN2blk4_avx2.c
   const size_t D4=D>>2, Dr=D-(D4<<2), lda4=lda<<2;
@ROUT ATL_cpAN2blk4_avx2.c ATL_cpAN2blk12_avx2.c
   size_t j;
   #ifdef ALPHAN
      const ATL_VTYPE valp = {ATL_rnone,ATL_rnone,ATL_rnone,ATL_rnone};
   #elif defined(ALPHAX)
      const ATL_VTYPE valp = {alpha,alpha,alpha,alpha};
   #endif
@ROUT ATL_cpAN2blk12_avx2.c
   for (j=0; j < D12; j++)
   {
      size_t k;
      for (k=0; k < K; k++)
      {
         ATL_VTYPE a0, a1, a2;
         ATL_vgather(a0, A+k, off);
         ATL_vgather(a1, A4+k, off);
         ATL_vgather(a2, A8+k, off);
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmul(a0, a0, valp);
            ATL_vmul(a1, a1, valp);
            ATL_vmul(a2, a2, valp);
         #endif
         ATL_vst(b, a0);
         ATL_vst(b+4, a1);
         ATL_vst(b+8, a2);
         b += 12;
      }
      A += lda12;
      A4 += lda12;
      A8 += lda12;
   }
   if (Dr)
   {
      const ATL_VTYPE z0={ATL_rzero,ATL_rzero,ATL_rzero,ATL_rzero};
      ATL_VTYPE vmsk;
      const TYPE *pA=A;
      const size_t D4 = Dr>>2, Drr=Dr-(D4<<2), ZPAD = 3 - ((Dr+3)>>2);
      size_t k;
      #ifdef SREAL
         int msk[4];
         #define NONE -1
      #else
         long long int msk[4];
         #define NONE -1L
      #endif
      if (Drr)
      {
         msk[0] = msk[1] = msk[2] = msk[3] = 0;
         switch(Drr)
         {
         case 3:
            msk[2] = NONE;
         case 2:
            msk[1] = NONE;
         case 1:
            msk[0] = NONE;
         default:;
         }
         ATL_vuld(vmsk, (void*)msk);
      }
      #undef NONE
      for (k=0; k < K; k++)
      {
         ATL_VTYPE a0, a1;
         switch(D4)
         {
         case 2:
            ATL_vgather(a0, A+k, off);
            ATL_vgather(a1, A4+k, off);
            #if defined(ALPHAN) || defined(ALPHAX)
               ATL_vmul(a0, a0, valp);
               ATL_vmul(a1, a1, valp);
            #endif
            ATL_vst(b, a0);
            ATL_vst(b+4, a1);
            b += 8;
            pA = A8;
            break;
         case 1:
            ATL_vgather(a0, A+k, off);
            #if defined(ALPHAN) || defined(ALPHAX)
               ATL_vmul(a0, a0, valp);
            #endif
            ATL_vst(b, a0);
            b += 4;
            pA = A4;
         default:;
         }
         if (Drr)
         {
            ATL_vmskgat(a0, pA+k, off, vmsk);
            #if defined(ALPHAN) || defined(ALPHAX)
               ATL_vmul(a0, a0, valp);
            #endif
            ATL_vst(b, a0);
            b += 4;
         }
         for (j=0; j < ZPAD; j++, b += 4)
            ATL_vst(b, z0);
      }
   }
}
@ROUT ATL_cpAN2blk4_avx2.c
   for (j=0; j < D4; j++, A += lda4)
   {
      size_t k;
      for (k=0; k < K; k++)
      {
         ATL_VTYPE a0;
         ATL_vgather(a0, A+k, off);
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmul(a0, a0, valp);
         #endif
         ATL_vst(b, a0);
         b += 4;
      }
   }
   if (Dr)
   {
      const ATL_VTYPE z0={0,0,0,0};
      ATL_VTYPE vmsk;
      #ifdef SREAL
         int msk[4]={0,0,0,0};
         #define NONE -1
      #else
         long long int msk[4]={0,0,0,0};
         #define NONE -1L
      #endif
      size_t k;

      switch(Dr)
      {
      case 3:
         msk[2] = NONE;
      case 2:
         msk[1] = NONE;
      case 1:
         msk[0] = NONE;
      default:;
      }
      ATL_vuld(vmsk, (void*)msk);
      for (k=0; k < K; k++)
      {
         ATL_VTYPE a0;
         ATL_vmskgat(a0, A+k, off, vmsk);
         #if defined(ALPHAN) || defined(ALPHAX)
            ATL_vmul(a0, a0, valp);
         #endif
         ATL_vst(b, a0);
         b += 4;
      }
   }
}
