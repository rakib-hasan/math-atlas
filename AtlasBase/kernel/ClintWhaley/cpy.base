@ROUT ATL_cpammC12x4_aXbX.c
#include <stddef.h>
#ifdef SREAL
   #define TYPE float
#else
   #define TYPE double
#endif
#include "atlas_prefetch.h"
// HERE vl=1, mu=12, nu=4 bs=48
void ATL_USERCPMM
(
   const size_t M,      /* number of rows in A */
   const size_t N,      /* number of columns in A */
   const TYPE alpha,  /* scalar for b */
   const TYPE *b,     /* matrix stored in 12x4-major order */
   const TYPE beta,   /* scalar for C */
   TYPE *C,           /* matrix to be copied to access-major format */
   const size_t ldc     /* stride between row elements */
)
{
   const unsigned int mf = M/12, nf = N/4;
   const unsigned int m = mf*12, n = nf*4, mr = M-m, nr = N-n;
   const unsigned int pansz = (nr) ? (nf+1)*48 : nf*48; // bs=48
   const size_t incC = ldc*4 - m;
   unsigned int i, j;
   TYPE *C0=C, *C1=C0+ldc, *C2=C1+ldc, *C3=C2+ldc;
   for (j=nf; j; j--, b += 48)
   {
      const TYPE *p = b;
      for (i=mf; i; i--, p += pansz)
      {
         ATL_pfl1W(p+pansz);
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C2[11] = beta*C2[11] + alpha*p[35];
            C2 += 12;
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
            C3[10] = beta*C3[10] + alpha*p[46];
            C3[11] = beta*C3[11] + alpha*p[47];
            C3 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
            C2[0] = beta*C2[0] + alpha*p[24];
            C3[0] = beta*C3[0] + alpha*p[36];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C3[0] = beta*C3[0] + alpha*p[36];
            C3[1] = beta*C3[1] + alpha*p[37];
            C3[2] = beta*C3[2] + alpha*p[38];
            C3[3] = beta*C3[3] + alpha*p[39];
            C3[4] = beta*C3[4] + alpha*p[40];
            C3[5] = beta*C3[5] + alpha*p[41];
            C3[6] = beta*C3[6] + alpha*p[42];
            C3[7] = beta*C3[7] + alpha*p[43];
            C3[8] = beta*C3[8] + alpha*p[44];
            C3[9] = beta*C3[9] + alpha*p[45];
            C3[10] = beta*C3[10] + alpha*p[46];
         break;
      default:;
      }
      C0 += incC;
      C1 += incC;
      C2 += incC;
      C3 += incC;
   }
   switch(nr)
   {
      const TYPE *p;
   case 1:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
         break;
      default:;
      }
      break;
   case 2:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
         break;
      default:;
      }
      break;
   case 3:
      p = b;
      for (i=0; i < mf; i++, p += pansz)
      {
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C0[11] = beta*C0[11] + alpha*p[11];
            C0 += 12;
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C1[11] = beta*C1[11] + alpha*p[23];
            C1 += 12;
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
            C2[11] = beta*C2[11] + alpha*p[35];
            C2 += 12;
      }
      switch(mr)
      {
      case 1:
            C0[0] = beta*C0[0] + alpha*p[0];
            C1[0] = beta*C1[0] + alpha*p[12];
            C2[0] = beta*C2[0] + alpha*p[24];
         break;
      case 2:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
         break;
      case 3:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
         break;
      case 4:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
         break;
      case 5:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
         break;
      case 6:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
         break;
      case 7:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
         break;
      case 8:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
         break;
      case 9:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
         break;
      case 10:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
         break;
      case 11:
            C0[0] = beta*C0[0] + alpha*p[0];
            C0[1] = beta*C0[1] + alpha*p[1];
            C0[2] = beta*C0[2] + alpha*p[2];
            C0[3] = beta*C0[3] + alpha*p[3];
            C0[4] = beta*C0[4] + alpha*p[4];
            C0[5] = beta*C0[5] + alpha*p[5];
            C0[6] = beta*C0[6] + alpha*p[6];
            C0[7] = beta*C0[7] + alpha*p[7];
            C0[8] = beta*C0[8] + alpha*p[8];
            C0[9] = beta*C0[9] + alpha*p[9];
            C0[10] = beta*C0[10] + alpha*p[10];
            C1[0] = beta*C1[0] + alpha*p[12];
            C1[1] = beta*C1[1] + alpha*p[13];
            C1[2] = beta*C1[2] + alpha*p[14];
            C1[3] = beta*C1[3] + alpha*p[15];
            C1[4] = beta*C1[4] + alpha*p[16];
            C1[5] = beta*C1[5] + alpha*p[17];
            C1[6] = beta*C1[6] + alpha*p[18];
            C1[7] = beta*C1[7] + alpha*p[19];
            C1[8] = beta*C1[8] + alpha*p[20];
            C1[9] = beta*C1[9] + alpha*p[21];
            C1[10] = beta*C1[10] + alpha*p[22];
            C2[0] = beta*C2[0] + alpha*p[24];
            C2[1] = beta*C2[1] + alpha*p[25];
            C2[2] = beta*C2[2] + alpha*p[26];
            C2[3] = beta*C2[3] + alpha*p[27];
            C2[4] = beta*C2[4] + alpha*p[28];
            C2[5] = beta*C2[5] + alpha*p[29];
            C2[6] = beta*C2[6] + alpha*p[30];
            C2[7] = beta*C2[7] + alpha*p[31];
            C2[8] = beta*C2[8] + alpha*p[32];
            C2[9] = beta*C2[9] + alpha*p[33];
            C2[10] = beta*C2[10] + alpha*p[34];
         break;
      default:;
      }
      break;
   default:;
   }
}
