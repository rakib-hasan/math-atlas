@skip ==================================================================
@skip ATLAS / Level 3 BLAS recursive kernels                        AP00
@skip Last modification : 05/28/00
@skip ==================================================================
@skip File layout:
@skip 
@skip rc3_inc,      ATL_gemmRB,   ATL_trscal,   ATL_hescal,   ATL_rhemmLL,
@skip ATL_rhemmLU,  ATL_rhemmRL,  ATL_rhemmRU,  ATL_rher2kLC, ATL_rher2kLN,
@skip ATL_rher2kUC, ATL_rher2kUN, ATL_rherkLC,  ATL_rherkLN,  ATL_rherkUC,
@skip ATL_rherkUN,  ATL_rsymmLL,  ATL_rsymmLU,  ATL_rsymmRL,  ATL_rsymmRU,
@skip ATL_rsyr2kLN, ATL_rsyr2kLT, ATL_rsyr2kUN, ATL_rsyr2kUT, ATL_rsyrkLN,
@skip ATL_rsyrkLT,  ATL_rsyrkUN,  ATL_rsyrkUT,  ATL_rtrmmLLC, ATL_rtrmmLLN,
@skip ATL_rtrmmLLT, ATL_rtrmmLUC, ATL_rtrmmLUN, ATL_rtrmmLUT, ATL_rtrmmRLC,
@skip ATL_rtrmmRLN, ATL_rtrmmRLT, ATL_rtrmmRUC, ATL_rtrmmRUN, ATL_rtrmmRUT,
@skip ATL_rtrsmLLC, ATL_rtrsmLLN, ATL_rtrsmLLT, ATL_rtrsmLUC, ATL_rtrsmLUN,
@skip ATL_rtrsmLUT, ATL_rtrsmRLC, ATL_rtrsmRLN, ATL_rtrsmRLT, ATL_rtrsmRUC,
@skip ATL_rtrsmRUN, ATL_rtrsmRUT, atlas_rblas3.h,             Make.l3aux. 
@skip ==================================================================
@skip Global define statements
@skip
@extract -addkeys -b @(BASEdir)include/atlas.inc lan=C type=none
@skip ==================================================================
@skip Specific define statements
@skip
@define RC3_INCLUDE @-addkeys -b @(srcdir)/atlrc3blas.base rout=rc3_inc@
@skip ==================================================================
@skip
@rout rc3_inc
@extract @(INCLUDE)
#include "atlas_misc.h"
#include "atlas_rblas3.h"
#include "atlas_kernel3.h"
#include "atlas_level3.h"
@skip
@skip ==================================================================
@skip
@rout ATL_gemmRB
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE)

@beginskip
void           Mjoin( PATL, gemmNN )
( const int,       const int,       const int,       const SCALAR,
  const TYPE *,    const int,       const TYPE *,    const int,
  const SCALAR,    TYPE *,          const int );
void           Mjoin( PATL, gemmNT )
( const int,       const int,       const int,       const SCALAR,
  const TYPE *,    const int,       const TYPE *,    const int,
  const SCALAR,    TYPE *,          const int );
void           Mjoin( PATL, gemmTN )
( const int,       const int,       const int,       const SCALAR,
  const TYPE *,    const int,       const TYPE *,    const int,
  const SCALAR,    TYPE *,          const int );
#ifdef TCPLX
void           Mjoin( PATL, gemmNC )
( const int,       const int,       const int,       const SCALAR,
  const TYPE *,    const int,       const TYPE *,    const int,
  const SCALAR,    TYPE *,          const int );
void           Mjoin( PATL, gemmCN )
( const int,       const int,       const int,       const SCALAR,
  const TYPE *,    const int,       const TYPE *,    const int,
  const SCALAR,    TYPE *,          const int );
#endif
@endskip
#ifdef TREAL
   #define H_ALP (const SCALAR)(*((TYPE *)(ALPHA)))
   #define H_BET (const SCALAR)(*((TYPE *)(BETA)))
#else
   #define H_ALP (const SCALAR)(ALPHA)
   #define H_BET (const SCALAR)(BETA)
#endif
/*
 * Type-less wrappers around the ATLAS matrix-multiply functions.
 */
void Mjoin( PATL, gemmNN_RB )
(
   const int                  M,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC
)
{
   Mjoin(PATL,ammm)(AtlasNoTrans, AtlasNoTrans, M, N, K, H_ALP, A, LDA,
                    (const TYPE *)(B), LDB, H_BET, (TYPE *)(C), LDC);
@beginskip
#ifdef TREAL
   Mjoin( PATL, gemmNN )( M, N, K, (const SCALAR)(*((TYPE *)(ALPHA))),
                          (const TYPE *)(A), LDA, (const TYPE *)(B), LDB,
                          (const SCALAR)(*((TYPE *)(BETA))), (TYPE *)(C), LDC );
#else
   Mjoin( PATL, gemmNN )( M, N, K, (const SCALAR)(ALPHA), (const TYPE *)(A),
                          LDA, (const TYPE *)(B), LDB, (const SCALAR)(BETA),
                          (TYPE *)(C), LDC );
#endif
@endskip
}

void Mjoin( PATL, gemmNT_RB )
(
   const int                  M,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC
)
{
   Mjoin(PATL,ammm)(AtlasNoTrans, AtlasTrans, M, N, K, H_ALP, A, LDA,
                    (const TYPE *)(B), LDB, H_BET, (TYPE *)(C), LDC);
@beginskip
#ifdef TREAL
   Mjoin( PATL, gemmNT )( M, N, K, (const SCALAR)(*((TYPE *)(ALPHA))),
                          (const TYPE *)(A), LDA, (const TYPE *)(B), LDB,
                          (const SCALAR)(*((TYPE *)(BETA))), (TYPE *)(C), LDC );
#else
   Mjoin( PATL, gemmNT )( M, N, K, (const SCALAR)(ALPHA), (const TYPE *)(A),
                          LDA, (const TYPE *)(B), LDB, (const SCALAR)(BETA),
                          (TYPE *)(C), LDC );
#endif
@endskip
}

void Mjoin( PATL, gemmTN_RB )
(
   const int                  M,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC
)
{
   Mjoin(PATL,ammm)(AtlasTrans, AtlasNoTrans, M, N, K, H_ALP, A, LDA,
                    (const TYPE *)(B), LDB, H_BET, (TYPE *)(C), LDC);
@beginskip
#ifdef TREAL
   Mjoin( PATL, gemmTN )( M, N, K, (const SCALAR)(*((TYPE *)(ALPHA))),
                          (const TYPE *)(A), LDA, (const TYPE *)(B), LDB,
                          (const SCALAR)(*((TYPE *)(BETA))), (TYPE *)(C), LDC );
#else
   Mjoin( PATL, gemmTN )( M, N, K, (const SCALAR)(ALPHA), (const TYPE *)(A),
                          LDA, (const TYPE *)(B), LDB, (const SCALAR)(BETA),
                          (TYPE *)(C), LDC );
#endif
@endskip
}

#ifdef TCPLX
void Mjoin( PATL, gemmNC_RB )
(
   const int                  M,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC
)
{
   Mjoin(PATL,ammm)(AtlasNoTrans, AtlasConjTrans, M, N, K, 
                    (const SCALAR)(ALPHA), (const TYPE *)(A), LDA, 
                    (const TYPE *)(B), LDB, (const SCALAR)(BETA),
                    (TYPE *)(C), LDC );
}

void Mjoin( PATL, gemmCN_RB )
(
   const int                  M,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC
)
{
   Mjoin(PATL,ammm)(AtlasConjTrans, AtlasNoTrans, M, N, K, 
                    (const SCALAR)(ALPHA), (const TYPE *)(A), LDA, 
                    (const TYPE *)(B), LDB, (const SCALAR)(BETA),
                    (TYPE *)(C), LDC );
}
#endif
@skip
@skip ==================================================================
@skip
@rout ATL_trscal
@define rname @Mjoin( PATL, trscal )@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE)
 
void @(rname)
(
   const enum ATLAS_UPLO      UPLO,
   const int                  M,
   const int                  N,
   const SCALAR               ALPHA,
   TYPE                       * A,
   const int                  LDA
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
#ifdef TCPLX
   TYPE                       tmp;
#endif
   TYPE                       * a_j;
   int                        i, incA, j, mn;
@extract @(EXECUTABLE_STATEMENT)
   if( UPLO == AtlasLower )
   {
      incA = ( ( LDA - M + 1 ) SHIFT ); mn = Mmin( M, N );

      if( SCALAR_IS_ZERO( ALPHA ) )
      {
         for( j = 0; j < mn; j++ )
         {
#ifdef TREAL
            for( i = j; i < M; i++, A += (1 SHIFT) ) { *A = ATL_rzero; }
#else
            for( i = j; i < M; i++, A += (1 SHIFT) ) { *A = A[1] = ATL_rzero; }
#endif
            A += incA;
            incA += (1 SHIFT);
         }
      }
      if( !( SCALAR_IS_ONE( ALPHA ) ) )
      {
         for( j = 0; j < mn; j++ )
         {
            for( i = j; i < M; i++, A += (1 SHIFT) )
#ifdef TREAL
            { *A *= ALPHA; }
#else
            {
               tmp  = (*A);
               *A   = tmp * ALPHA[0] - A[1] * ALPHA[1];
               A[1] = tmp * ALPHA[1] + A[1] * ALPHA[0];
            }
#endif
            A += incA;
            incA += (1 SHIFT);
         }
      }
   }
   else
   {
      incA = ( LDA SHIFT );

      if( SCALAR_IS_ZERO( ALPHA ) )
      {
         for( j = 0, mn = M - N; j < N; j++, mn++, A += incA )
         {
            a_j = A;
            for( i = 0; i <= mn; i++, a_j += (1 SHIFT) )
#ifdef TREAL
            { *a_j = ATL_rzero; }
#else 
            { *a_j = a_j[1] = ATL_rzero; }
#endif
         }
      }
      else if( !( SCALAR_IS_ONE( ALPHA ) ) )
      {
         for( j = 0, mn = M - N; j < N; j++, mn++, A += incA )
         {
            a_j = A;
            for( i = 0; i <= mn; i++, a_j += (1 SHIFT) )
#ifdef TREAL
            { *a_j *= ALPHA; }
#else
            {
               tmp = (*a_j);
               (*a_j) = tmp * ALPHA[0] - a_j[1] * ALPHA[1];
               a_j[1] = tmp * ALPHA[1] + a_j[1] * ALPHA[0];
            }
#endif
         }
      }
   }
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_hescal
@define rname @Mjoin( PATL, hescal )@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   const enum ATLAS_UPLO      UPLO,
   const int                  M,
   const int                  N,
   const TYPE                 ALPHA,
   TYPE                       * A,
   const int                  LDA
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   TYPE                       * a_j;
   int                        i, incA, j, mn;
@extract @(EXECUTABLE_STATEMENT)
   if( UPLO == AtlasLower )
   {
      incA = ( ( LDA - M + 1 ) SHIFT ); mn = Mmin( M, N );

      if(      ALPHA == ATL_rzero )
      {
         for( j = 0; j < mn; j++ )
         {
            for( i = j; i < M; i++, A += 2 ) { *A = A[1] = ATL_rzero; }
            A += incA;
            incA += 2;
         }
      }
      else if( ALPHA != ATL_rone )
      {
         for( j = 0; j < mn; j++ )
         {
            *A *= ALPHA; A[1] = ATL_rzero; A += 2;

            for( i = j+1; i < M; i++, A += 2 ) { *A *= ALPHA; A[1] *= ALPHA; }
            A += incA;
            incA += 2;
         }
      }
   }
   else
   {
      incA = ( LDA SHIFT );

      if(      ALPHA == ATL_rzero )
      {
         for( j = 0, mn = M - N; j < N; j++, mn++, A += incA )
         {
            a_j = A;
            for( i = 0; i <= mn; i++, a_j += 2 )
            {
               *a_j = a_j[1] = ATL_rzero;
            }
         }
      }
      else if( ALPHA != ATL_rone )
      {
         for( j = 0, mn = M - N; j < N; j++, mn++, A += incA )
         {
            a_j = A;
            for( i = 0; i < mn; i++, a_j += 2 )
            {
               *a_j   *= ALPHA;
               a_j[1] *= ALPHA;
            }
            *a_j *= ALPHA; a_j[1] = ATL_rzero;
         }
      }
   }
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rhemmLL
@define rname @ATL_rhemmLL@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HEMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Themm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( m2, N, m1, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA, B,
                  LDB, BETA, Mrc3( C, m1, 0, LDC, size ), LDC );

   RTYP->Tgemm( m1, N, m2, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, C, LDC );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, Mrc3( C,
                m1, 0, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rhemmLU
@define rname @ATL_rhemmLU@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HEMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Themm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( m1, N, m2, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                  Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, C, LDC );

   RTYP->Tgemm( m2, N, m1, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                B, LDB, BETA, Mrc3( C, m1, 0, LDC, size ), LDC );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, Mrc3( C,
                m1, 0, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rhemmRL
@define rname @ATL_rhemmRL@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HEMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Themm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                  Mrc3( A, n1, 0, LDA, size ), LDA, RTYP->one, C, LDC );

   RTYP->Tgemm( M, n2, n1, ALPHA, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ), LDA,
                Mrc3( B, 0, n1, LDB, size ), LDB, RTYP->one, Mrc3( C,
                0, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rhemmRU
@define rname @ATL_rhemmRU@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HEMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Themm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( M, n2, n1, ALPHA, B, LDB, Mrc3( A, 0, n1, LDA, size ),
                  LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                Mrc3( A, 0, n1, LDA, size ), LDA, RTYP->one, C, LDC );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ), LDA,
                Mrc3( B, 0, n1, LDB, size ), LDB, RTYP->one, Mrc3( C,
                0, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rher2kLC
@define rname @ATL_rher2kLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HER2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * Calph,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   { 
      ATL_assert( RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 ); 
      return; 
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, Calph, A, LDA, B, LDB, BETA, C, LDC,
                 RB );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( A, 0, n1, LDA, size ), LDA,
                B, LDB, BETA,      Mrc3( C, n1, 0, LDC, size ), LDC );

   RTYP->Tgemm( n2, n1, K, Calph,  Mrc3( B, 0, n1, LDB, size ), LDB,
                A, LDA, RTYP->one, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Calph, Mrc3( A, 0, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, BETA, Mrc3( C,
                 n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rher2kLN
@define rname @ATL_rher2kLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HER2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * Calph,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   { 
      ATL_assert( RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }
   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, Calph, A, LDA, B, LDB, BETA, C, LDC,
                 RB );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( A, n1, 0, LDA, size ), LDA,
                B, LDB, BETA,      Mrc3( C, n1, 0, LDC, size ), LDC );

   RTYP->Tgemm( n2, n1, K, Calph,  Mrc3( B, n1, 0, LDB, size ), LDB,
                A, LDA, RTYP->one, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Calph, Mrc3( A, n1, 0, LDA, size ),
                 LDA, Mrc3( B, n1, 0, LDB, size ), LDB, BETA, Mrc3( C,
                 n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rher2kUC
@define rname @ATL_rher2kUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HER2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * Calph,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   { 
      ATL_assert( RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, Calph, A, LDA, B, LDB, BETA, C, LDC,
                 RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( B, 0, n1, LDB, size ),
                LDB, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( n1, n2, K, Calph, B, LDB, Mrc3( A, 0, n1, LDA, size ),
                LDA, RTYP->one, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Calph, Mrc3( A, 0, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, BETA, Mrc3( C, n1,
                 n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rher2kUN
@define rname @ATL_rher2kUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HER2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * Calph,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   {
      ATL_assert( RTYP->Ther2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }
   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, Calph, A, LDA, B, LDB, BETA, C, LDC,
                 RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( B, n1, 0, LDB, size ),
                LDB, BETA,      Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( n1, n2, K, Calph, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, RTYP->one, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Calph, Mrc3( A, n1, 0, LDA, size ),
                 LDA, Mrc3( B, n1, 0, LDB, size ), LDB, BETA, Mrc3( C,
                 n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rherkLC
@define rname @ATL_rherkLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HERK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { if(!RTYP->Therk( N, K, ALPHA, A, LDA, BETA, C, LDC)) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                A, LDA, BETA, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rherkLN
@define rname @ATL_rherkLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HERK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { if(!RTYP->Therk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                A, LDA, BETA, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rherkUC
@define rname @ATL_rherkUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HERK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { if(!RTYP->Therk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( A, 0, n1, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rherkUN
@define rname @ATL_rherkUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_HERK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { if(!RTYP->Therk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( A, n1, 0, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsymmLL
@define rname @ATL_rsymmLL@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Tsymm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( m2, N, m1, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA, B,
                  LDB, BETA, Mrc3( C, m1, 0, LDC, size ), LDC );

   RTYP->Tgemm( m1, N, m2, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, C, LDC );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, Mrc3( C,
                m1, 0, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsymmLU
@define rname @ATL_rsymmLU@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Tsymm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( m1, N, m2, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                  Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, C, LDC );

   RTYP->Tgemm( m2, N, m1, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                B, LDB, BETA, Mrc3( C, m1, 0, LDC, size ), LDC );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, Mrc3( C,
                m1, 0, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsymmRL
@define rname @ATL_rsymmRL@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Tsymm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                  Mrc3( A, n1, 0, LDA, size ), LDA, RTYP->one, C, LDC );

   RTYP->Tgemm( M, n2, n1, ALPHA, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ), LDA,
                Mrc3( B, 0, n1, LDB, size ), LDB, RTYP->one, Mrc3( C,
                0, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsymmRU
@define rname @ATL_rsymmRU@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Tsymm( M, N, ALPHA, A, LDA, B, LDB, BETA, C, LDC ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->TgemmNN( M, n2, n1, ALPHA, B, LDB, Mrc3( A, 0, n1, LDA, size ),
                  LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                Mrc3( A, 0, n1, LDA, size ), LDA, RTYP->one, C, LDC );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ), LDA,
                Mrc3( B, 0, n1, LDB, size ), LDB, RTYP->one, Mrc3( C,
                0, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyr2kLN
@define rname @ATL_rsyr2kLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYR2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   {
      ATL_assert( RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( A, n1, 0, LDA, size ), LDA,
                B, LDB, BETA,      Mrc3( C, n1, 0, LDC, size ), LDC );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( B, n1, 0, LDB, size ), LDB,
                A, LDA, RTYP->one, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                 Mrc3( B, n1, 0, LDB, size ), LDB, BETA, Mrc3( C, n1,
                 n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyr2kLT
@define rname @ATL_rsyr2kLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYR2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   {
      ATL_assert( RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( A, 0, n1, LDA, size ), LDA,
                B, LDB, BETA,      Mrc3( C, n1, 0, LDC, size ), LDC );

   RTYP->Tgemm( n2, n1, K, ALPHA,  Mrc3( B, 0, n1, LDB, size ), LDB,
                A, LDA, RTYP->one, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                 Mrc3( B, 0, n1, LDB, size ), LDB, BETA, Mrc3( C, n1,
                 n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyr2kUN
@define rname @ATL_rsyr2kUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYR2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   {
      ATL_assert( RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( B, n1, 0, LDB, size ),
                LDB, BETA,      Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( n1, n2, K, ALPHA, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, RTYP->one, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                 Mrc3( B, n1, 0, LDB, size ), LDB, BETA, Mrc3( C, n1,
                 n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyr2kUT
@define rname @ATL_rsyr2kUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYR2K_T                * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * B,
   const int                  LDB,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
#ifndef SYR2K_REC
   if( !RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC ) ) return;
#endif
   if( ( n1 = N - RB ) <= 0 )
   {
      ATL_assert( RTYP->Tsyr2k( N, K, ALPHA, A, LDA, B, LDB, BETA,
                                C, LDC ) == 0 );
      return;
   }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( B, 0, n1, LDB, size ),
                LDB, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   RTYP->Tgemm( n1, n2, K, ALPHA, B, LDB, Mrc3( A, 0, n1, LDA, size ),
                LDA, RTYP->one, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                 Mrc3( B, 0, n1, LDB, size ), LDB, BETA, Mrc3( C, n1,
                 n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyrkLN
@define rname @ATL_rsyrkLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 
#define FORCE_RECUR 1

void @(rname)
(
   RC3_SYRK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   n1 = N - RB;
   #ifdef FORCE_RECUR
   if( n1 <= 0 )
   #endif
   { if(!RTYP->Tsyrk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                A, LDA, BETA, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyrkLT
@define rname @ATL_rsyrkLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 
#define FORCE_RECUR 1

void @(rname)
(
   RC3_SYRK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   n1 = N - RB;
   #ifdef FORCE_RECUR
   if( n1 <= 0 )
   #endif
   { if(!RTYP->Tsyrk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n2, n1, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                A, LDA, BETA, Mrc3( C, n1, 0, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyrkUN
@define rname @ATL_rsyrkUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_SYRK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   n1 = N - RB;
   #ifdef FORCE_RECUR
   if( n1 <= 0 )
   #endif
   { if(!RTYP->Tsyrk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( A, n1, 0, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, n1, 0, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rsyrkUT
@define rname @ATL_rsyrkUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 
#define FORCE_RECUR 1

void @(rname)
(
   RC3_SYRK_T                 * RTYP,
   const int                  N,
   const int                  K,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   const void                 * BETA,
   void                       * C,
   const int                  LDC,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   n1 = N - RB;
   #ifdef FORCE_RECUR
   if( n1 <= 0 )
   #endif
   { if(!RTYP->Tsyrk( N, K, ALPHA, A, LDA, BETA, C, LDC )) return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, n1, K, ALPHA, A, LDA, BETA, C, LDC, RB );

   RTYP->Tgemm( n1, n2, K, ALPHA, A, LDA, Mrc3( A, 0, n1, LDA, size ),
                LDA, BETA, Mrc3( C, 0, n1, LDC, size ), LDC );

   @(rname)( RTYP, n2, K, ALPHA, Mrc3( A, 0, n1, LDA, size ), LDA,
                BETA, Mrc3( C, n1, n1, LDC, size ), LDC, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLLC
@define rname @ATL_rtrmmLLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m1, N, m2, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, B, LDB );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLLN
@define rname @ATL_rtrmmLLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m2, N, m1, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA,
                B, LDB, RTYP->one, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLLT
@define rname @ATL_rtrmmLLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m1, N, m2, ALPHA, Mrc3( A, m1, 0, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, B, LDB );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLUC
@define rname @ATL_rtrmmLUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m2, N, m1, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                B, LDB, RTYP->one, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLUN
@define rname @ATL_rtrmmLUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m1, N, m2, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                Mrc3( B, m1, 0, LDB, size ), LDB, RTYP->one, B, LDB );

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmLUT
@define rname @ATL_rtrmmLUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m2, N, m1, ALPHA, Mrc3( A, 0, m1, LDA, size ), LDA,
                B, LDB, RTYP->one, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRLC
@define rname @ATL_rtrmmRLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );

   RTYP->Tgemm( M, n2, n1, ALPHA, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, RTYP->one, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRLN
@define rname @ATL_rtrmmRLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                Mrc3( A, n1, 0, LDA, size ), LDA, RTYP->one, B, LDB );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRLT
@define rname @ATL_rtrmmRLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );

   RTYP->Tgemm( M, n2, n1, ALPHA, B, LDB, Mrc3( A, n1, 0, LDA, size ),
                LDA, RTYP->one, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRUC
@define rname @ATL_rtrmmRUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                Mrc3( A, 0, n1, LDA, size ), LDA, RTYP->one, B, LDB );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRUN
@define rname @ATL_rtrmmRUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );

   RTYP->Tgemm( M, n2, n1, ALPHA, B, LDB, Mrc3( A, 0, n1, LDA, size ),
                LDA, RTYP->one, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrmmRUT
@define rname @ATL_rtrmmRUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRMM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrmm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n1, n2, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB,
                Mrc3( A, 0, n1, LDA, size ), LDA, RTYP->one, B, LDB );

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLLC
@define rname @ATL_rtrsmLLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m1, N, m2, RTYP->negone, Mrc3( A, m1, 0, LDA, size ),
                LDA, Mrc3( B, m1, 0, LDB, size ), LDB, ALPHA, B, LDB );

   @(rname)( RTYP, m1, N, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLLN
@define rname @ATL_rtrsmLLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m2, N, m1, RTYP->negone, Mrc3( A, m1, 0, LDA, size ),
                LDA, B, LDB, ALPHA, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m2, N, RTYP->one, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLLT
@define rname @ATL_rtrsmLLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m1, N, m2, RTYP->negone, Mrc3( A, m1, 0, LDA, size ),
                LDA, Mrc3( B, m1, 0, LDB, size ), LDB, ALPHA, B, LDB );

   @(rname)( RTYP, m1, N, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLUC
@define rname @ATL_rtrsmLUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m2, N, m1, RTYP->negone, Mrc3( A, 0, m1, LDA, size ),
                LDA, B, LDB, ALPHA, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m2, N, RTYP->one, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLUN
@define rname @ATL_rtrsmLUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m2, N, ALPHA, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );

   RTYP->Tgemm( m1, N, m2, RTYP->negone, Mrc3( A, 0, m1, LDA, size ),
                LDA, Mrc3( B, m1, 0, LDB, size ), LDB, ALPHA, B, LDB );

   @(rname)( RTYP, m1, N, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmLUT
@define rname @ATL_rtrsmLUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        m1, m2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( m1 = M - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   m2 = M - ( m1 = RB + ( m1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, m1, N, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( m2, N, m1, RTYP->negone, Mrc3( A, 0, m1, LDA, size ),
                LDA, B, LDB, ALPHA, Mrc3( B, m1, 0, LDB, size ), LDB );

   @(rname)( RTYP, m2, N, RTYP->one, Mrc3( A, m1, m1, LDA, size ),
                 LDA, Mrc3( B, m1, 0, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRLC
@define rname @ATL_rtrsmRLC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n2, n1, RTYP->negone, B, LDB, Mrc3( A, n1, 0, LDA,
                size ), LDA, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n2, RTYP->one, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRLN
@define rname @ATL_rtrsmRLN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
   RTYP->Tgemm( M, n1, n2, RTYP->negone, Mrc3( B, 0, n1, LDB, size ),
                LDB, Mrc3( A, n1, 0, LDA, size ), LDA, ALPHA, B, LDB );
   @(rname)( RTYP, M, n1, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRLT
@define rname @ATL_rtrsmRLT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n2, n1, RTYP->negone, B, LDB, Mrc3( A, n1, 0, LDA,
                size ), LDA, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n2, RTYP->one, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRUC
@define rname @ATL_rtrsmRUC@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );

   RTYP->Tgemm( M, n1, n2, RTYP->negone, Mrc3( B, 0, n1, LDB, size ),
                LDB, Mrc3( A, 0, n1, LDA, size ), LDA, ALPHA, B, LDB );

   @(rname)( RTYP, M, n1, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRUN
@define rname @ATL_rtrsmRUN@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n1, ALPHA, A, LDA, B, LDB, RB );

   RTYP->Tgemm( M, n2, n1, RTYP->negone, B, LDB, Mrc3( A, 0, n1, LDA,
                size ), LDA, ALPHA, Mrc3( B, 0, n1, LDB, size ), LDB );

   @(rname)( RTYP, M, n2, RTYP->one, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout ATL_rtrsmRUT
@define rname @ATL_rtrsmRUT@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
@extract @(RC3_INCLUDE) 

void @(rname)
(
   RC3_TRSM_T                 * RTYP,
   const int                  M,
   const int                  N,
   const void                 * ALPHA,
   const void                 * A,
   const int                  LDA,
   void                       * B,
   const int                  LDB,
   const int                  RB
)
{
@extract @(ATLAS_RC3_COMMENT)
@extract @(LOCAL_VARIABLE)
   size_t                     size;
   int                        n1, n2;
@extract @(EXECUTABLE_STATEMENT)
   if( ( n1 = N - RB ) <= 0 )
   { RTYP->Ttrsm( M, N, ALPHA, A, LDA, B, LDB ); return; }

   n2 = N - ( n1 = RB + ( n1 / ( RB << 1 ) ) * RB ); size = RTYP->size;

   @(rname)( RTYP, M, n2, ALPHA, Mrc3( A, n1, n1, LDA, size ),
                 LDA, Mrc3( B, 0, n1, LDB, size ), LDB, RB );

   RTYP->Tgemm( M, n1, n2, RTYP->negone, Mrc3( B, 0, n1, LDB, size ),
                LDB, Mrc3( A, 0, n1, LDA, size ), LDA, ALPHA, B, LDB );

   @(rname)( RTYP, M, n1, RTYP->one, A, LDA, B, LDB, RB );
@extract @(END_OF_ROUTINE)
@undef rname
@skip
@skip ==================================================================
@skip
@rout atlas_rblas3.h
@define rname @atlas_rblas3.h@
@extract @(VER_ATLAS_SRC) -def contributor "@(clint)"
#ifndef ATLAS_RBLAS3_H
#define ATLAS_RBLAS3_H
/*
 * =====================================================================
 * Include files
 * =====================================================================
 */
#include "atlas_misc.h"
/*
 * =====================================================================
 * #define macros definitions
 * =====================================================================
 */
#define    Mrc3( a_, i_, j_, lda_, siz_ ) \
           ( (void*) ( (char*)(a_) + ( ( (i_)+(j_)*((size_t)lda_) )*(siz_) ) ) )
/*
 * =====================================================================
 * #typedef definitions
 * =====================================================================
 */
typedef void           (*KR3_FUN_GEMM_T)
( const int,       const int,       const int,       const void *,
  const void *,    const int,       const void *,    const int,
  const void *,    void *,          const int );
typedef void           (*KR3_FUN_HEMM_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    const int,       const void *,
  void *,          const int );
typedef int            (*KR3_FUN_HER2K_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    const int,       const void *,
  void *,          const int );
typedef int            (*KR3_FUN_HERK_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    void *,          const int );
typedef void           (*KR3_FUN_SYMM_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    const int,       const void *,
  void *,          const int );
typedef int            (*KR3_FUN_SYR2K_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    const int,       const void *,
  void *,          const int );
typedef int            (*KR3_FUN_SYRK_T)
( const int,       const int,       const void *,    const void *,
  const int,       const void *,    void *,          const int );
typedef void           (*KR3_FUN_TRMM_T)
( const int,       const int,       const void *,    const void *,
  const int,       void *,          const int );
typedef void           (*KR3_FUN_TRSM_T)
( const int,       const int,       const void *,    const void *,
  const int,       void *,          const int );

typedef struct
{
   size_t             size;
   void               * one;
   KR3_FUN_GEMM_T     TgemmNN;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_SYMM_T     Tsymm;
} RC3_SYMM_T;

typedef struct
{
   size_t             size;
   void               * one;
   KR3_FUN_GEMM_T     TgemmNN;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_HEMM_T     Themm;
} RC3_HEMM_T;

typedef struct
{
   size_t             size;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_SYRK_T     Tsyrk;
} RC3_SYRK_T;

typedef struct
{
   size_t             size;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_HERK_T     Therk;
} RC3_HERK_T;

typedef struct
{
   size_t             size;
   void               * one;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_SYR2K_T    Tsyr2k;
} RC3_SYR2K_T;

typedef struct
{
   size_t             size;
   void               * one;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_HER2K_T    Ther2k;
} RC3_HER2K_T;

typedef struct
{
   size_t             size;
   void               * one;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_TRMM_T     Ttrmm;
} RC3_TRMM_T;

typedef struct
{
   size_t             size;
   void               * one, * negone;
   KR3_FUN_GEMM_T     Tgemm;
   KR3_FUN_TRSM_T     Ttrsm;
} RC3_TRSM_T;

typedef void           (*RC3_FUN_HEMM_T)
(  RC3_HEMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
typedef void           (*RC3_FUN_HER2K_T)
(  RC3_HER2K_T *,   const int,       const int,       const void *,
   const void *,    const void *,    const int,       const void *,
   const int,       const void *,    void *,          const int,
   const int );
typedef void           (*RC3_FUN_HERK_T)
(  RC3_HERK_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    void *,
   const int,       const int );
typedef void           (*RC3_FUN_SYMM_T)
(  RC3_SYMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
typedef void           (*RC3_FUN_SYR2K_T)
(  RC3_SYR2K_T *,   const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
typedef void           (*RC3_FUN_SYRK_T)
(  RC3_SYRK_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    void *,
   const int,       const int );
typedef void           (*RC3_FUN_TRMM_T)
(  RC3_TRMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       void *,          const int,
   const int );
typedef void           (*RC3_FUN_TRSM_T)
(  RC3_TRSM_T *,    const int,       const int,       const void *,
   const void *,    const int,       void *,          const int,
   const int );
/*
 * =====================================================================
 * Level 3 recursive BLAS internal function prototypes
 * =====================================================================
 */
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @ptyp_ s d
      @multidef rout_ gemmNN_RB gemmNT_RB gemmTN_RB 
   @ptyp_ c z
      @multidef rout_ gemmNN_RB gemmNT_RB gemmTN_RB gemmNC_RB gemmCN_RB 
   @ptyp_ !
   @whiledef rout_
void           ATL_@(pre_)@(rout_)
(  const int,       const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int );
   @endwhile 
   @killkeys ptyp_
@endwhile
/*
 * =====================================================================
 * Recursive BLAS function prototypes
 * =====================================================================
 */
@whiledef suf_ LL LU RL RU
void           ATL_rsymm@(suf_)
(  RC3_SYMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
void           ATL_rhemm@(suf_)
(  RC3_HEMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
@endwhile

@whiledef suf_ LN LT UN UT
void           ATL_rsyrk@(suf_)
(  RC3_SYRK_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    void *,
   const int,       const int );
void           ATL_rsyr2k@(suf_)
(  RC3_SYR2K_T *,   const int,       const int,       const void *,
   const void *,    const int,       const void *,    const int,
   const void *,    void *,          const int,       const int );
@endwhile

@whiledef suf_ LN LC UN UC
void           ATL_rherk@(suf_)
(  RC3_HERK_T *,    const int,       const int,       const void *,
   const void *,    const int,       const void *,    void *,
   const int,       const int );
void           ATL_rher2k@(suf_)
(  RC3_HER2K_T *,   const int,       const int,       const void *,
   const void *,    const void *,    const int,       const void *,
   const int,       const void *,    void *,          const int,
   const int );
@endwhile

@whiledef suf_ LLN LUN LLT LUT LLC LUC RLN RUN RLT RUT RLC RUC
void           ATL_rtrmm@(suf_)
(  RC3_TRMM_T *,    const int,       const int,       const void *,
   const void *,    const int,       void *,          const int,
   const int );
void           ATL_rtrsm@(suf_)
(  RC3_TRSM_T *,    const int,       const int,       const void *,
   const void *,    const int,       void *,          const int,
   const int );
@endwhile

#endif
/*
 * End of @(rname)
 */
@undef rname
@skip
@skip ==================================================================
@skip
@rout Make.l3aux
@extract @(VER_ATLAS_MAK)
#
include Make.inc
mySRCdir = $(SRCdir)/src/blas/level3/rblas
#
########################################################################
#
AINCLUDES   = \
   $(INCSdir)/atlas_misc.h    $(INCSdir)/atlas_lvl3.h   \
   $(INCSdir)/atlas_kernel3.h $(INCSdir)/atlas_rblas3.h
@whiledef pre_ z c d s
@up@(pre_)INCLUDES = \
   $(AINCLUDES) $(INCAdir)/atlas_@(pre_)amm_sum.h \
   $(INCAdir)/atlas_@(pre_)opsq_perf.h
@endwhile
#
## Object files ########################################################
# 
ARC3BLASAUX  = \
@declare "   " y y
   @multidef rout_
      rsymmLL  rsymmLU  rsymmRL  rsymmRU  rsyrkLN  rsyrkLT  rsyrkUN  rsyrkUT
      rsyr2kLN rsyr2kLT rsyr2kUN rsyr2kUT rtrmmLLN rtrmmLLT rtrmmLUN rtrmmLUT
      rtrmmRLN rtrmmRLT rtrmmRUN rtrmmRUT rtrsmLLN rtrsmLLT rtrsmLUN rtrsmLUT
      rtrsmRLN rtrsmRLT rtrsmRUN rtrsmRUT
   @endmultidef
   @whiledef rout_
      ATL_@(rout_).o
   @endwhile
@enddeclare
#
CZRC3BLASAUX = \
@declare "   " y y
   @multidef rout_
      rhemmLL  rhemmLU  rhemmRL  rhemmRU  rherkLC  rherkLN  rherkUC  rherkUN
      rher2kLC rher2kLN rher2kUC rher2kUN rtrmmLLC rtrmmLUC rtrmmRLC rtrmmRUC
      rtrsmLLC rtrsmLUC rtrsmRLC rtrsmRUC
   @endmultidef
   @whiledef rout_
      ATL_@(rout_).o
   @endwhile
@enddeclare
#
@whiledef pre_ z c d s
@up@(pre_)RC3BLASAUX  = \
   @declare "   " y y
      @multidef rout_ gemmRB
      @whiledef rout_
         ATL_@(pre_)@(rout_).o
      @endwhile
   @enddeclare
#
@endwhile
## Targets #############################################################
#
all   : lib
#
lvl3  : lib
#
lib   : slib dlib clib zlib
#
@whiledef pre_ z c d s
@(pre_)lvl3 : @(pre_)lib
@endwhile
#
@whiledef pre_ z c d s
@(pre_)lib  : @(pre_)lib.grd
@endwhile
#
@whiledef p_ d s
@(p_)lib.grd  : $(@up@(p_)RC3BLASAUX) $(ARC3BLASAUX)
	@(arch) @(archflgs) @(atllib) $(@up@(p_)RC3BLASAUX) $(ARC3BLASAUX)
	@(ranlib) @(atllib)
	touch @(p_)lib.grd
#
@endwhile
@whiledef p_ z c
@(p_)lib.grd  : $(@up@(p_)RC3BLASAUX) $(ARC3BLASAUX) $(CZRC3BLASAUX)
	@(arch) @(archflgs) @(atllib) $(@up@(p_)RC3BLASAUX) $(ARC3BLASAUX) \
        $(CZRC3BLASAUX)
	@(ranlib) @(atllib)
	touch @(p_)lib.grd
#
@endwhile
#
########################################################################
# 
@multidef upr_ d s d s
@whiledef pre_ z c d s
   @addkeys ptyp_=@(pre_)
   @multidef rout_ gemmRB
   @ptyp_ s d
      @define cdefs @-D@up@(upr_)REAL@
   @ptyp_ c z
      @define cdefs @-D@up@(upr_)CPLX@
   @ptyp_ !
   @whiledef rout_
      @define rpre_ @ATL_@(rout_)@
      @define rsrc_ @$(mySRCdir)/@(rpre_).c@
      @define robj_ @ATL_@(pre_)@(rout_).o@
@20l@(robj_) : @(rsrc_) $(@up@(pre_)INCLUDES)
@(CCcomp) @(cdefs) @(rsrc_)
      @undef rpre_
      @undef rsrc_
      @undef robj_
   @endwhile
   @undef cdefs
   @killkeys ptyp_
   @undef upr_
@endwhile
#
@multidef rout_
   rsymmLL  rsymmLU  rsymmRL  rsymmRU  rsyrkLN  rsyrkLT  rsyrkUN  rsyrkUT
   rsyr2kLN rsyr2kLT rsyr2kUN rsyr2kUT rtrmmLLN rtrmmLLT rtrmmLUN rtrmmLUT
   rtrmmRLN rtrmmRLT rtrmmRUN rtrmmRUT rtrsmLLN rtrsmLLT rtrsmLUN rtrsmLUT
   rtrsmRLN rtrsmRLT rtrsmRUN rtrsmRUT
   rhemmLL  rhemmLU  rhemmRL  rhemmRU  rherkLC  rherkLN  rherkUC  rherkUN
   rher2kLC rher2kLN rher2kUC rher2kUN rtrmmLLC rtrmmLUC rtrmmRLC rtrmmRUC
   rtrsmLLC rtrsmLUC rtrsmRLC rtrsmRUC
@endmultidef
@whiledef rout_
   @define rpre_ @ATL_@(rout_)@
   @define rsrc_ @$(mySRCdir)/@(rpre_).c@
   @define robj_ @@(rpre_).o@
@20l@(robj_) : @(rsrc_) $(AINCLUDES)
@(CCcomp) @(rsrc_)
   @undef rpre_
   @undef rsrc_
   @undef robj_
@endwhile
# 
########################################################################
#
@whiledef pre_ d s
@(pre_)clean           :
	rm -f $(@up@(pre_)RC3BLASAUX) $(ARC3BLASAUX) @(pre_)*.grd 
#
@endwhile
@whiledef pre_ z c
@(pre_)clean           :
	rm -f $(@up@(pre_)RC3BLASAUX) $(ARC3BLASAUX) $(CZRC3BLASAUX) \
        @(pre_)*.grd 
#
@endwhile
#
clean            :
	rm -f *.o *.grd
#
########################################################################
@skip
@skip
@rout !
@skip
@skip ==================================================================
@skip
@undef RC3_INCLUDE
@skip
@skip ==================================================================
@skip
