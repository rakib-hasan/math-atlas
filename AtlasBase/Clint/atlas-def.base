@ROUT CreateDef.sh
#!/bin/sh
#
# USAGE: <topdir> <arch> <mach> <cc> <mcc>
# Makes atlas architectural default file from probe results.
# <topdir> : path to your ATLAS subdir (TOPdir from Make.inc)
# <arch> : ARCH from Make.inc
# <mach> : Machine name (usally <arch> without OS)
# <cc>   : Default C compiler
# <mcc>  : C compiler used for matmul compilation
#
TOPdir=$1
arch=$2
mach=$3
dcc=$4
mcc=$5
#
defdir=$1/CONFIG/ARCHS/
mmdir=$1/tune/blas/gemm/$arch/res
ammdir=$1/tune/blas/ammm/$arch/res
incdir=$1/include/$arch
#
cd $defdir ; rm -rf $mach
cd $defdir ; mkdir $mach
cd $defdir/$mach ; mkdir $dc
cd $TOPdir/CONFIG/ARCHS ; mkdir $arch
cp $TOPdir/tune/sysinfo/$arch/res/?MULADD  $defdir/.
cp $TOPdir/tune/sysinfo/$arch/res/L1CacheSize  $defdir/.
cp $ammdir/?AMM*.sum $defdir/.
cp $ammdir/?ARANKK.sum $defdir/.
cp $mmdir/?MMRES.sum  $defdir/.
cp $mmdir/?eMMRES.sum  $defdir/.
cp $mmdir/?MMKSSE.sum  $defdir/.
cp $mmdir/?gMMRES.sum  $defdir/.
cp $mmdir/?guMMRES.sum  $defdir/.
cp $mmdir/?gMMRES  $defdir/.
cp $mmdir/?Clean[M,N,K]  $defdir/.
cp $mmdir/?NB  $defdir/.
cp $mmdir/?NCNB  $defdir/.
cp $mmdir/?best[N,T][N,T]_*  $defdir/.
cp $mmdir/?uMMRES $defdir/.
cp $mmdir/?uClean[M,N,K] $defdir/.
cp $mmdir/?uClean[M,N,K]F $defdir/.
cp $incdir/atlas_cacheedge.h  $defdir/.
cp $incdir/atlas_tcacheedge.h  $defdir/.
cp $incdir/atlas_??NKB.h  $defdir/.
cp $incdir/?Xover.h $defdir/.
cp $incdir/atlas_?sysinfo.h $defdir/.
cp $TOPdir/tune/blas/level3/$arch/res/atlas_?trsmXover.h $defdir/.
cp $TOPdir/tune/blas/gemv/$arch/res/?MV[N,T]K.sum $defdir/.
cp $TOPdir/tune/blas/ger/$arch/res/?R1RES $defdir/.
gcc -o xnegfloat negfloat.c
./xnegfloat $defdir/?uClean[M,N,K] 
./xnegfloat $defdir/?uClean[M,N,K]F 
./xnegfloat $defdir/?uMMRES
./xnegfloat $defdir/?MMRES 
./xnegfloat $defdir/?gMMRES 
./xnegfloat $defdir/?best* 
./xnegfloat $defdir/?Clean[M,N,K]
./xnegfloat $defdir/?MULADD
./xnegfloat $defdir/?MVRES
./xnegfloat $defdir/?R1RES
rm -f ./xnegfloat
# vi $defdir/?uClean[M,N,K] $defdir/?uClean[M,N,K]F $defdir/?uMMRES
@ROUT KillDirs.sh
#!/bin/bash
# Kills all dirs for which we have a .tgz
archs=`ls *.tgz`
for arch in $archs
do
   echo rm -rf ${arch%\.tgz}
   rm -rf ${arch%\.tgz}
done
@ROUT CreateDirs.sh
#!/bin/sh
# Creates dirs from .tar.bz2
for arch in $*
do
bunzip2 -c $arch | tar xvf -
done
@ROUT CreateTar.sh
#!/bin/sh
# Creates the appropriate .tgz from all subdirs
for arch in `ls -F | fgrep "/" | sed -e 's/\///'`
do
tar cvf $arch.tar $arch/*
bzip2 --best $arch.tar
@skip mv $arch.tar.gz $arch.tgz
done
@ROUT negfloat.c
#include <stdio.h>
#include <ctype.h>
#include <assert.h>

/*
 NOTE: need to make this routine take i0, iN; only negates integers
 i0 through iN; if iN -1, upper bound is infinity
 */
char *NegateFloats(char *ln)
{
   static char ol[512];
   char num[128];
   int i=0, j=0, k, h, ndot;

   do
   {
      if ( (ln[i] == '.') || isdigit(ln[i]) )
      {
         if (i==0 || isspace(ln[i-1]) || isdigit(ln[i]))
         {
            for (ndot=k=0; isdigit(ln[i]) || ln[i] == '.'; k++)
            {
               if (ln[i] == '.') ndot++;
               num[k] = ln[i++];
            }
            if (ndot == 1 && k > 1 && isspace(ln[i]))
            {
               if (j > 1 && ol[j-1] == ' ' && ol[j-2] == ' ') ol[j-1] = '-';
               else if (j == 0 || ol[j-1] != '-') ol[j++] = '-';
            }
            for (h=0; h < k; h++) ol[j++] = num[h];
         }
         else ol[j++] = ln[i++];
      }
      else ol[j++] = ln[i++];
   }
   while(ln[i]);
   ol[j] = '\0';
   return(ol);
}

main(int nargs, char **args)
{
   char tnam[256], ln[512], *lp;
   FILE *fpin, *fpout;
   int i;

   assert(tmpnam(tnam));
   for(i=1; i < nargs; i++)
   {
      fpin = fopen(args[i], "r");
      if (fpin == NULL)
      {
         fprintf(stderr, "FILE %s NOT FOUND, SKIPPING!!\n", args[i]);
         continue;
      }
      fpout = fopen(tnam, "w");
      assert(fpin);
      assert(fpout);
      while (fgets(ln, 512, fpin))
      {
         lp = NegateFloats(ln);
         fputs(lp, fpout);
      }
      fclose(fpin);
      fclose(fpout);
      remove(args[i]);
      sprintf(ln, "cp %s %s\n", tnam, args[i]);
      assert(system(ln) == 0);
      remove(tnam);
   }
   exit(0);
}
@ROUT Makefile
include ../Make.inc
arch=$(ARCH)
mach=$(ARCH)
machp=$(ARCH)p$(NPROC)
dcc=default
cc=gcc
skc=$(skcD)
dkc=$(dkcD)
smc=$(smcD)
dmc=$(dmcD)
comps = skc=$(skc) dkc=$(dkc) smc=$(smc) dmc=$(dmc)

adefd = $(ADuse)
anewd = $(BLDdir)/ARCHS/$(ADnew)

$(ADuse) : $(ADtar)
	bunzip2 -c $(ADtar) | tar xfm -
tarfile : $(ADnew)
	- rm $(ADnew).tar.bz2 $(ADnew).tar
	tar cvf $(ADnew).tar $(ADnew)
	$(BZIP) $(ADnew).tar

do_archdef : $(ADtarg)
do_nothing:
do_basic : basic.grd
do_full : full.grd
$(ADnew)/kern/$(dcc) :
	mkdir $(ADnew)/kern/$(dcc)
$(ADnew)/gemm/$(dcc) :
	mkdir $(ADnew)/gemm/$(dcc)
$(ADnew)/lapack/$(dcc) :
	mkdir $(ADnew)/lapack/$(dcc)

res:
	mkdir res
res/goodgcc.txt : res
	echo "'$(GOODGCC)'" > res/goodgcc.txt
$(ADnew) :
	mkdir $(ADnew)
	mkdir $(ADnew)/kern $(ADnew)/gemm $(ADnew)/lapack
	$(MAKE) $(ADnew)/kern/$(skc) dcc=$(skc)
	$(MAKE) $(ADnew)/kern/$(dkc) dcc=$(dkc)
	$(MAKE) $(ADnew)/gemm/$(smc) dcc=$(smc)
	$(MAKE) $(ADnew)/gemm/$(dmc) dcc=$(dmc)
	$(MAKE) $(ADnew)/lapack/$(dmc) dcc=$(dmc)
	$(MAKE) $(ADnew)/lapack/$(smc) dcc=$(smc)

@whiledef rt mv mm r1 cp
xneg@(rt) : $(SRCdir)/CONFIG/ARCHS/neg@(rt)file.c
	$(XCC) $(XCCFLAGS) -o $@ $(SRCdir)/CONFIG/ARCHS/neg@(rt)file.c
@endwhile
@skip xnegvmmf : $(SRCdir)/CONFIG/ARCHS/negvmmfile.c
@skip 	$(ICC) $(ICCFLAGS) -o xnegvmmf $(SRCdir)/CONFIG/ARCHS/negvmmfile.c
xnegflt : $(SRCdir)/CONFIG/ARCHS/negflt.c
	$(XCC) $(XCCFLAGS) -O -o xnegflt $(SRCdir)/CONFIG/ARCHS/negflt.c

@multidef pres [d,z] [s,c]
@whiledef pre d s
@(pre)sys_put:
	- cp $(adefd)/kern/@(pre)MULADD $(SYSdir)/res/.
	- cp $(adefd)/kern/L1CacheSize $(SYSdir)/res/.
@(pre)sys :
	- cp $(SYSdir)/res/@(pre)MULADD $(anewd)/kern/.
	./xnegflt $(anewd)/kern/@(pre)MULADD
	- cp $(SYSdir)/res/L1CacheSize $(anewd)/kern/.
@(pre)kern_put:
	- cp $(adefd)/kern/$(@(pre)kc)/@(pres)TRSM_NB $(BLDdir)/tune/blas/level3/res/.
	- cp $(adefd)/kern/$(@(pre)kc)/@(pres)MV[N,T]K.sum $(BLDdir)/tune/blas/gemv/res/.
	- cp  $(adefd)/kern/$(@(pre)kc)/@(pres)R?K.sum $(BLDdir)/tune/blas/ger/res/.
	- cp  $(adefd)/kern/$(@(pre)kc)/@(pres)*.CPS $(BLDdir)/tune/blas/ger/res/.
	- cp $(adefd)/kern/$(@(pre)kc)/@(pres)*_SUMM $(L1Tdir)/res/.
@(pre)kern: xnegflt xnegr1 xnegmv xnegcp
	rm -f $(anewd)/kern/$(@(pre)kc)/@(pres)*
	- cp $(BLDdir)/tune/blas/level3/res/@(pres)TRSM_NB $(anewd)/kern/$(@(pre)kc)/.
	- cp $(BLDdir)/tune/blas/gemv/res/@(pres)MV[N,T]K.sum $(anewd)/kern/$(@(pre)kc)/.
	- cp $(BLDdir)/tune/blas/ger/res/@(pres)R?K.sum $(anewd)/kern/$(@(pre)kc)/.
	- cp $(BLDdir)/tune/blas/gemm/res/@(pres)cpylst.CPS $(anewd)/kern/$(@(pre)kc)/.
	- cp $(BLDdir)/tune/blas/gemm/res/@(pres)cpyPERF.CPS $(anewd)/kern/$(@(pre)kc)/.
	./xnegcp  $(anewd)/kern/$(@(pre)kc)/@(pres)cpyPERF.CPS
	./xnegmv  $(anewd)/kern/$(@(pre)kc)/@(pres)MVNK.sum
	./xnegmv  $(anewd)/kern/$(@(pre)kc)/@(pres)MVTK.sum
	./xnegr1 $(anewd)/kern/$(@(pre)kc)/@(pres)R?K.sum
	- cp $(L1Tdir)/res/@(pres)*_SUMM $(anewd)/kern/$(@(pre)kc)/.
@(pre)gemmBAS_put:
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)WORKING.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)AMMFRCLST.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)g[k,m]vAMMUR.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)opL1.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)gAMSYRK.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)AMSYRKFNL.sum $(MMTdir)/res/.
#	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)ip*PERF.sum $(MMTdir)/res/.
@(pre)gemm_put:
@beginskip
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)ipmen.sum $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)*SYRK* $(MMTdir)/res/.
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)[i,o]p*.sum $(MMTdir)/res/.
@endskip
	- cp $(adefd)/gemm/$(@(pre)mc)/@(pres)*.sum $(MMTdir)/res/.
@(pre)gemm: xnegflt xnegmm
@skip xnegvmmf
	rm -f $(anewd)/gemm/$(@(pre)mc)/@(pres)*
	- cp $(MMTdir)/res/@(pres)[i,o]p*.sum $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pres)*AMM*.sum $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pres)gAMSYRK.sum $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pre)AMSYRKFNL.sum $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pres)SYRKFNL.sum $(anewd)/gemm/$(@(pre)mc)/.
	./xnegmm $(anewd)/gemm/$(@(pre)mc)/@(pres)*AMM*.sum \
                 $(anewd)/gemm/$(@(pre)mc)/@(pres)[i,o]p*.sum \
                 $(anewd)/gemm/$(@(pre)mc)/@(pres)*SYRK*.sum 
	- cp $(MMTdir)/res/@(pres)WORKING.sum $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pres)nreg $(anewd)/gemm/$(@(pre)mc)/.
	- cp $(MMTdir)/res/@(pres)fpuMM $(anewd)/gemm/$(@(pre)mc)/.
@(pre)la_get:
	rm -f $(anewd)/lapack/$(@(pre)mc)/atlas_@(pres)GetNB_*.h
	for file in $(INCAdir)/atlas_@(pres)GetNB_*.h ; do \
           if [ -s "$${file}" ]; then \
	      cp $${file} $(anewd)/lapack/$(@(pre)mc)/. ; \
           fi \
        done
	rm -f $(anewd)/lapack/$(@(pre)mc)/atlas_@(pres)tGetNB_*.h
	for file in $(INCAdir)/atlas_@(pres)tGetNB_*.h ; do \
           if [ -s "$${file}" ]; then \
	      cp $${file} $(anewd)/lapack/$(@(pre)mc)/. ; \
           fi \
        done
@(pre)la_put :
	- cp $(adefd)/lapack/$(@(pre)mc)/atlas_@(pres)GetNB_*.h $(INCAdir)/.
	- cp $(adefd)/lapack/$(@(pre)mc)/atlas_@(pres)tGetNB_*.h $(INCAdir)/.
   @undef pres
@endwhile

la_get : sla_get dla_get
la_put : sla_put dla_put
sys_put : ssys_put dsys_put
kern_put : skern_put dkern_put
gemm_put : sgemm_put dgemm_put
	- cp $(adefd)/gemm/atlas_cacheedge.h $(INCAdir)/.
	- cp $(adefd)/gemm/atlas_cacheedge.h $(MMTdir)/res/.
	- cp $(adefd)/gemm/atlas_tcacheedge.h $(INCAdir)/.
	- cp $(adefd)/gemm/atlas_tcacheedge.h $(MMTdir)/res/.
@skip	- cp $(adefd)/gemm/atlas_??NKB.h $(INCAdir)/.
@skip	- cp $(adefd)/gemm/atlas_??NKB.h $(MMTdir)/res/.
gemmBAS_put : sgemmBAS_put dgemmBAS_put
sys : ssys dsys
kern : skern dkern
gemm : sgemm dgemm
	- cp $(INCAdir)/atlas_cacheedge.h $(anewd)/gemm/
	- cp $(INCAdir)/atlas_tcacheedge.h $(anewd)/gemm/
@skip	- cp $(INCAdir)/atlas_??NKB.h $(anewd)/gemm/
ArchNew : $(ADnew) xnegflt
	$(MAKE) sys kern gemm la_get
	- cp $(BLDdir)/bin/INSTALL_LOG/?PerfSumm.txt $(anewd)/.
	rm -f xnegflt
basic.grd : $(ADuse)
	$(MAKE) sys_put kern_put gemmBAS_put
	touch basic.grd
	
full.grd : $(ADuse)
	$(MAKE) sys_put kern_put gemm_put la_put
	touch full.grd
archput : $(ADtarg)
@skip archput : sys_put kern_put gemm_put la_put
