@ROUT storage.idx scopy.idx dcopy.idx ccopy.idx zcopy.idx
#
# In this file, any line beginning with a '#' is ignored, but the # must be in
# column 0.  All multiple whitespace is reduced to one space (i.e. used only
# to distinguish where words begin/end).  Lines may be extended by putting '\'
# as the *last* character of line.
#
@ROUT storage.idx
# This file indexes the user-supplied storage schemes, and has the following
# format:
# The file has the following format (default values in []):
# ID=<id> FLAG=<bitfield> BLKSZF='iexp' EXTELTF='iexp'
# ID must be a unique >100 number identifying the storage scheme.  A copy
#    routine with a matching STGID must be found for both copy directions
#    in the appropriate [s,c,d,z]blkcpy.idx types.  The storage IDs that
#    are so far in use by ATLAS itself (<100) are:
#      0: access major storage as used in generator, details in struct
#      1: access major (unvectorized or m-vec) storage for A or B
#      2: access major (unvectorized or m-vec) storage for C
#      3: K-vectorized access major storage for A or B
#      4: K-vectorized access major storage for C
#      5: block major (ATLAS 3.10 or older code gen support)
# 'iexp': must contain in '' a valid ANSI C integer expression which computes
#         the indicated storage using only constants and the key-specific
#         variables.
# BLKSZF [((M+mu-1)/mu)*((N+nu-1)/nu)*mu*nu]
#        must contain in '' a valid ANSI C integer expression which computes
#        iexp computes the number of elements to store one block using this
#        storage pattern.  ATLAS assumes real & imag components stored 
#        separately, so complex size should be half of total size.
#        The only variables that can be used will be chosen by the search after
#        tuning and passed to a function with the following prototype:
#           int getsz(int M, int N, int mu, int nu, int vlen);
#        to allow ATLAS to allocate storage for an individual block. j
#        The expression may use the following variables, in addition
#        to any constants (these args themselved might be constants for some
#        storage formats):
#          M : number of rows chosen for block factor
#          N : number of cols chosen for block factor
#         mu : unroll&jam chosen for M dim
#         nu : unroll&jam chosen for N dim
#       vlen : length of vectorization employed
# EXTELTF: [4*mu*nu]
#          how many elements must be allocated past the end of allocated
#          block memory so that advanced loads don't seg fault.  This number
#          should be small.  The generated size function will have prototype:
#            int getsz(int mu, int nu, int vlen);
#
@ROUT scopy.idx dcopy.idx ccopy.idx zcopy.idx
# This file indexes the user-supplied copy routines for the storage schemes
# indexed in storage.ids, and has the following format (non-mandatory
# keys show the default in []):
# ID=<id> STGID=<stgid> TOBLK=[0,1] TRANS=[0,1] CONJ=[0,1] MU=<mu> NU=<nu> \
#         VLEN=<vlen> ROUT='rt' AUTH='name' COMP='gcc' CFLAGS='flags' \
#    ALPHA=lst BETA=lst
# ID: Mandatory.  Unique (in this file only) int >= 0.  
# STGID: Mandatory.  Number >0 matching and ID in storage.idx.  Predefined:
#    0: access major, scope TOBLKCBLK,VLEN,KVEC to determine what type
#    X: user defined type
# TOBLK: Mandatory. 
#         0: copies from STGID block storage to column-major
#         1: copies from column-major to STGID block storage
# MU/NU: [0] unrolling along rows/cols
# TRANS: [n] Needed only for A/B storage, indicates transpose being done:
#    N: cols of matrix stored contiguously, rows strided (col-major)
#    T: rows of matrix stored contiguously, cols strided (row-major)
# ALPHA: mandatory.  What alpha cases handled by kern.  For A/B, full list
#        is 1,N,X, for C it is 0,1,N,X.
# BETA: mandatory for C ignored for A/B.  Full list is 0,1,N,X.
#
# NOTE: for a storage format to be used by ATLAS, enough copy funcs must
#       be supplied for use, and the number required varies by whether the
#       format is for GEMM's A/B or C matrix:
#       A&B: TOBLK=1 and for real TRANS=N&T, cplx TRANS=N&T&C&H
#            TOBLK=0 must be present for testing & custom uses.
#       C  : TOBLK=0 required. TOBLK=1 needed for testing & custom uses.
#
@ROUT 00scopy.idx 00dcopy.idx
ID=1 STGID=0 TOBLK=1 MU=12 NU=4 ALPHA=X BETA=X \
     ROUT='ATL_cpammC12x4_aXbX.c' AUTH='R. Clint Whaley'
ID=2 STGID=0 TOBLK=1 MU=12 NU=4 ROUT='ATL_cpammC12x4_aXbX.c' \
     AUTH='R. Clint Whaley' ALPHA=X BETA=X COMP='gcc' CFLAGS='-O2 -mfpmath=387'
@ROUT cptst.c
/* 
 * This is a sanity check that takes a known-good copy implementation in
 * CPK_GOOD, and one to test in CPK_TEST.  It then applies these routines
 * on duplicate matrices, and looks for errors greater than expected due to
 * fp arithmetic.  This version specialized for col-major to blk copies.
 */
void cpyblksN(const int mb, const int nb, const size_t M, const size_t N, 
              SCALAR alpha, TYPE *A, size_t lda, TYPE *B, size_ldb, TYPE *wrk)
/*
 * B <-- alpha*A; A&B both MxN, copy by blocks
 */
{
   const size_t nmblks=M/mb, Mb=nmblks*mb, mr=M-Mb;
   const size_t nnblks=N/nb, Nb=nnblks*nb, nr=N-Nb;
   size_t i, j;
   const int NB=nb SHIFT;
   #ifdef TCPLX
      TYPE ralpha[2];
   #else
      TYPE ralpha = ATL_rone / alpha;
   #endif
   #ifdef TCPLX
      Mjoin(PATL,cplxinvert)(1, alpha, 1, ralpha, 1);
   #endif

   for (j=0; j < Nb; j += nb, A += lda*NB, B += ldb*NB)
   {
      for (i=0; i < Mb; i += mb)
      {
         mycpyN(mb, nb, alpha, A+(i SHIFT), lda, wrk);
         myrcpyN(mb, nb, ralpha, B+(i SHIFT), ldb, wrk);
      }
   }
}
int cntErr(int verb, int M, int N, TYPE *A, size_t lda, TYPE *E, size_t lde, 
           TYPE tol)
{
   int j, nerr=0;
   for (j=0; j < N; j++, A += lda SHIFT, E += lde SHIFT)
   {
      for (i=0; i < M; i++)
      {
         diff = A[i] - E[i];
         if (diff > tol)
         {
            
         }
      }
   }
}
int main(int nargs, char **args)
{
   int mb=28, nb=36, lda, m=27, n=33, N=nb+4;
   int lda=mb+55;
   size_t szA, szW, csz, lda=mb+55, lda2, i;
   #ifdef TCPLX
      TYPE alpha[2]={ATL_rone, ATL_rzero}, beta[2]={ATL_rone, ATL_rzero};
   #else
      TYPE alpha=ATL_rone, beta=ATL_rone;
   #endif
   TYPE *A, *G, *T;
   char *cp;

   lda2 = lda SHIFT:
   sz = N*lda2;
   A = malloc(sz*sizeof(TYPE))
   assert(A);
   for (i=0; i < sz; i++)
      A[i] = i;
   szW = mb * nb;
   csz = 2*(szW SHIFT)*sizeof(TYPE) + 3*ATL_Cachelen;
   cp = malloc(2*csz);
   assert(cp);
   cp = (char*)w;
   for (i=0; i < 2*csz; i++)
      cp[i] = 0xFF;
   T = ATL_AlignPtr(cp) + ATL_Cachelen;
   G = (TYPE*) (((char)T) + csz);

}
@ROUT cpysearch
#include "atlas_cpparse.h"
#include "atlas_mmparse.h"
#include "atlas_mmtesttime.h"
#include "atlas_mmgen.h"

void PrintUsage(char *name, int ierr, char *flag)
{
   if (ierr > 0)
      fprintf(stderr, "Bad argument #%d: '%s'\n", ierr,
              flag?flag:"OUT-OF_ARGUMENTS");
   else if (ierr < 0)
      fprintf(stderr, "ERROR: %s\n", flag);
   fprintf(stderr, "USAGE: %s [flags:\n", name);
   fprintf(stderr, "   -p [s,d,c,z]: set type/precision prefix (d) \n");
   fprintf(stderr, "   -m [c,t,n] : matrix to copy\n");
   fprintf(stderr, "   -d [I,F] : copy Into or From block\n");
   fprintf(stderr, "   -v <verb> : set verbosity (1)\n");
   fprintf(stderr, "   -a [0,1,-1,2] : alpha to time, 2 means X\n");
   fprintf(stderr, "   -b [0,1,-1,2] : beta  to time, 2 means X\n");
   fprintf(stderr, 
      "   -K <file> : non-gemm kern support; repeat for multiple\n");
   exit(ierr ? ierr : -1);
}

ATL_mmnode_t *GetFlags
   (int nargs, char **args, int *VERB, int *FLAG, int *MINSZ, ATL_mmnode_t **KB)
/*
 * RETURNS: list of all kerns/blk factors to tune copies for
 */
{
   ATL_mmnode_t *mb, *mp;
   char pre='d', mat='c', dir='F', ta;
   int i, ibe=1, ial=1, k, n;

   *KB = NULL;
   *VERB = 0;
   *MINSZ = 24*24;
   for (i=1; i < nargs; i++)
   {
      if (args[i][0] != '-')
         PrintUsage(args[0], i, args[i]);

      switch(args[i][1])
      {
      case 'p':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        pre = tolower(args[i][0]);
        assert(pre == 's' || pre == 'd' || pre == 'z' || pre == 'c');
        break;
      case 'm':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        mat = toupper(args[i][0]);
        if (mat == 'N')
        {
           ta = mat;
           mat = 'A';
        }
        else if (mat == 'T')
        {
           ta = mat;
           mat = 'A';
        }
        else 
           assert(mat == 'C');
        break;
      case 'd':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        dir = toupper(args[i][0]);
        assert(dir == 'I' || dir == 'F');
        break;
      case 'K':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        if (!(*KB))
           *KB = ReadMMFile(args[i]);
        else
        {
           mp = ATL_LastMMNode(*KB);
           mp->next = ReadMMFile(args[i]);
        }
        break;
      @multidef iv ial ibe
      @whiledef ch a    b
      case '@(ch)':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
         @(iv) = atoi(args[i]);
         break;
         @undef iv
      @endwhile
      default:
         PrintUsage(args[0], i, args[i]);
      }
   }
   i = CopyEncode(pre, dir, mat, ta);
   i |= (mat == 'C') ? (1<<CPF_CBLK) : (1<<1<<CPF_ABLK);
   *FLAG = CopyEncodeScal(i, ial, ibe);
   mb = ReadMMFileWithPath(pre, "res", "geAMMRES.sum");
   mp = ATL_LastMMNode(mb);
   mp->next = ReadMMFileWithPath(pre, "res", "rkAMMRES.sum");
   assert(mb);
/*
 * Timing for copy needs to be MOVC, dont move A or B
 */
   for (mp=mb; mp; mp=mp->next)
   {
      mp->flag = (mp->flag & (~MMF_MVSET)) | MMF_MVC;
   }
   return(mb);
}

void DoTimings(char pre, int verb, unsigned int flag,
               ATL_mmnode_t *mb, ATL_cpnode_t *cb)
{
   ATL_mmnode_t *mp;
   ATL_cpnode_t *cp, *CB=NULL;
   char *fnam;
   int ialp, ibet=0;

   ialp = CopyGetAlphaI(flag);
   if (flag & (1<<CPF_CBLK))
      ibet = CopyGetBetaI(flag);
   fnam = GetCpySumNam(mb->blask,0,ialp,ibet);
   printf("FINDING BEST COPY: %s\n", fnam);
   for (mp=mb; mp; mp = mp->next)
   {
      ATL_mmnode_t *mmp;
      double mf, mfB;
      int vlen=mp->vlen;

      printf("   TIMINGS B=(%d,%d,%d), U=(%d,%d):\n", 
             mp->mbB, mp->nbB, mp->kbB, mp->mu, mp->nu);
      mp->vlen = 1;
      mfB = TimeMMKernel(verb, 0, mp, pre, mp->mbB, mp->nbB, ialp, ibet, 0, -1);
      printf("      ID=     0 VL= 1: mf=%.0f\n", mfB);
      mp->mflop[0] = mfB;
/*
 *    Try any hand-tuned cases that work
 */
      for (cp=cb; cp; cp = cp->next)
      {
         if (MMCopyWorksForKern(flag, mp, cp))
         {
            char *gens=mp->genstr, *rts=mp->rout; 
            int id=mp->ID, len;
            mp->ID = cp->ID;
            mp->genstr = NULL;
            len = strlen(cp->rout) + 10;
            mp->rout=malloc(len);
            assert(mp->rout);
            sprintf(mp->rout, "CPYCASES/%s", cp->rout);
            mf = TimeMMKernel(verb, 0, mp, pre, mp->mbB, mp->nbB, ialp, ibet, 
                               0, -1);
            printf("      ID=%6d VL=%2d: mf=%.0f\n", cp->ID, cp->vlen, mf);
            if (mf > mfB)
            {
               free(gens);
               free(rts);
               mp->mflop[0] = mfB = mf;
            }
            else
            {
               free(mp->rout);
               mp->genstr = gens;
               mp->rout = rts;
               mp->ID = id;
            }
         }
      }
/*
 *    See if we can use vectorized generator.
 *    Present vector generator only supports SSE/AVX for real GEMM C copy
 */
      #if defined(ATL_AVX) || defined(ATL_SSE2) || defined(ATL_SSE)
         if (mp->blask == ATL_KGECP2C || mp->blask == ATL_KGECPFC &&
             (pre == 's' || pre == 'd'))
         {
            char *gens;
            int VL = (pre == 's') ? 4 : 2;

         #if defined(ATL_SSE2) || defined(ATL_SSE1)
            #if defined(ATL_SSE2)
            if (mp->mu % VL == 0 && (pre == 'd' || pre == 's'))
            #else
            if (mp->mu % VL == 0 && pre == 's')
            #endif
            {
               gens = mp->genstr;
               mp->vlen = VL;
               mp->genstr = MMGetCpGenString_vec(pre, mp, ialp, ibet, "sse");
               mf = TimeMMKernel(verb, 0, mp, pre, mp->mbB, mp->nbB, ialp, 
                                 ibet, 0, -1);
               printf("      ID=     0 VL=%2d: mf=%.0f\n", VL, mf);
               if (mf > mfB*1.03)  /* SSE bigger code, must be 3% faster */
               {
                  free(gens);
                  mp->mflop[0] = mfB = mf;
                  mp->ivar = VL;
               }
               else
               {
                  free(mp->genstr);
                  mp->genstr = gens;
               }
            }
         #endif
         #ifdef ATL_AVX
            VL <<= 1;
            if (mp->mu % VL == 0)
            {
               gens = mp->genstr;
               mp->vlen = VL;
               mp->genstr = MMGetCpGenString_vec(pre, mp, ialp, ibet, "avx");
               mf = TimeMMKernel(verb, 0, mp, pre, mp->mbB, mp->nbB, ialp, 
                                 ibet, 0, -1);
               printf("      ID=     0 VL=%2d: mf=%.0f\n", VL, mf);
               if (mf > mfB*1.03)  /* AVX bigger code, must be 3% faster */
               {
                  free(gens);
                  mp->mflop[0] = mfB = mf;
                  mp->ivar = VL;
               }
               else
               {
                  free(mp->genstr);
                  mp->genstr = gens;
               }
            }
         #endif
         }
      #endif
      printf("   DONE.\n");
      mp->vlen = vlen;
   }
/*
 * Create output file of copy nodes
 */
   for (mp=mb; mp; mp = mp->next)
   {
      cp = GetCPNode();
      cp->flag = flag;
      cp->genstr = DupString(mp->genstr);
@skip      mfB = mp->nbB;
@skip      mfB = mbp->mbB * mfB;  /* # of elts & flops */
      if (mp->blask == ATL_KSKCP2C || mp->blask == ATL_KSKCPFC)
      {
         cp->mflop[0] = 2e-6 / mp->mflop[0]; /* time per elt */
         cp->flag |= 1L<<CPF_SYRK;
      }
      else
         cp->mflop[0] = 1e-6 / mp->mflop[0]; /* time per elt */
      cp->mu = mp->mu;
      cp->nu = mp->nu;
      cp->vlen = mp->ivar;
      cp->next = CB;
      CB = cp;
   }
   CB = ReverseCPQ(CB);
   WriteCPFileWithPath(pre, "res", fnam, CB);
   KillAllCPNodes(CB);
   printf("DONE, output in: res/%c%s\n", pre, fnam);
}

int main(int nargs, char **args)
/*
 * For now read geAMMRES.sum, later add rkAMMRES.sum & SYRK.
 * Will use this info to find unique lists of AB & C copiers.
 * -> Later must extend for A & B using possibly different copiers.
 * It then finds the fastest working copy routine for each case, 
 * trying each of following:
 * (1) Codes generated from atlas-mmkg.base (all standard formats)
 * (2) atlas-mmg.base (vector ops, but only mu%vlen Cblk formats)
 * (3) User-contributed cases
 */
{
   char pre;
   int verb, minSz, ialp, ibet=0;
   unsigned int flag;
   ATL_cpnode_t *cb;
   ATL_mmnode_t *mb, *kb, *mp;

   mb = GetFlags(nargs, args, &verb, &flag, &minSz, &kb);
   pre = CopyGetPre(flag);
   ialp = CopyGetAlphaI(flag);
   if (flag&(1<<CPF_CBLK))
      ibet = CopyGetBetaI(flag);
/*
 * Special non-GEMM copy must have kernID set specially
 */
   mp = kb;
   while(mp)
   {
      int kernID;
      ATL_mmnode_t *nxt = mp->next;
      if (mp->blask == ATL_KGEMM || 
          (!(flag&(1<<CPF_CBLK)) && mp->blask == ATL_KSYRK))
      {
         mp->blask = ATL_KGEMM;
         kb = RemoveMMNodeFromQ(kb, mp);
         mp->next = mb;
         mb = mp;
      }
      else if (mp->blask == ATL_KSYRK)
         MMCopyTimePrep1(pre, (flag&(1<<CPF_TOBLK)) ? ATL_KSKCPFC:ATL_KSKCP2C,
                         ialp, ibet, mp);
      else
         assert(0);
      mp = nxt;
   }
   mb = MMNoCopyRep(flag, minSz, mb);
   MMCopyTimePrep(pre, flag, mb);
   if (kb)
   {
      mp = ATL_LastMMNode(kb);
      mp->next = mb;
      mb = kb;
   }
   PrintMMNodes(stdout, mb);
   cb = ReadCPFileWithPath(pre, "CPYCASES", "copy.idx");
   if (!cb)
      printf("NO USER-SUPPLIED COPY ROUTINES!\n");
   DoTimings(pre, verb, flag, mb, cb);

   KillAllMMNodes(mb);
   if (cb)
      KillAllCPNodes(cb);
   return(0);
}
@ROUT cpcgen
#include "atlas_cpparse.h"
#include "atlas_mmgen.h"
@beginskip
void GenMakeGen(char pre, char *fnam, ATL_cpnode_t *cb)
{
   FILE *fp;
   ATL_mmnode_t *cp;
   char *styp;
   const int CPLX = (pre == 'z' || pre == 'c');
   const char upr = (pre == 'c' || pre == 's') ? 's' : 'd'; 
   const char UPR= (upr=='s') ? 'S': 'D';

   if (pre == 'c' || pre == 's')
      dcomp[2] = dflags[2] = 'S';
   fp = fopen(fnam, "w");
   assert(fp);
   fprintf(fp, "#include Make.inc"\n");
   if (!cb)
   {
      fprintf("all :\nlib :\n);
      fclose(fp);
      return;
   }
   fprintf(fp, "   objs =");
   for (cp=cb; cp; cp = cp->next)
      fprintf(fp, " \\\n          %s.o\n", cp->rout);
         
   PrintMakeTargs(fp, pre);
/*
 * Print compilation rules 
 */
   styp = MMCopyGetCompType(cp->flag);
   for (cp=cb; cp; cp = cp->next)
   {
      fprintf(fp, "%s.o : %s.c\n", cp->rout);
      fprintf(fp, "\t$(%cKC) $(%cKCFLAGS) -D%s=1 -DATL_MU=%u -DATL_NU=%u \\\n",
              UPR, UPR, styp, cp->mu, cp->nu);
      fprintf(fp, "       -DATL_USERCPMM=%s -c -o %s.o %s.c\n", cp->rout,
              cp->rout, cp->rout);
   }
   fclose(fp);
}

void GenProtos(char pre, FILE *fp, ATL_cpnode_t *cb)
{
   ATL_cpnode_t *cp;
   static int CPLX=(pre == 'z' || pre == 'c') ? 1 : 0;
   char *to, *frm;
   if (CPLX)
   {
      to = "ATL_CSZT,ATL_CSZT,const SCALAR,const TYPE*,ATL_CSZT,"
           "const SCALAR, TYPE*,TYPE*";
      frm = "ATL_CSZT,ATL_CSZT,const SCALAR,constTYPE*,const TYPE*,"
            "const SCALAR,TYPE*,ATL_CSZT";
   }
   else
   {
      to = "ATL_CSZT,ATL_CSZT,const SCALAR,const TYPE*,ATL_CSZT,"
           "const SCALAR, TYPE *";
      frm = "ATL_CSZT,ATL_CSZT,const SCALAR,const TYPE*,"
            "const SCALAR,TYPE*,ATL_CSZT";
   }
   for (cp=cb; cp; cp = cp->next)
      fprintf(fp, "void %s(%s);\n", cp->rout, (cp->flag&(1<<CPF_TOBLK)?to:frm);
}
@endskip
void GenCopyC(ATL_cpnode_t *cb, char *path)
{
   ATL_cpnode_t *cp;
   char *sp, *typs;
   int len, plen;
   char pre;

   if (!cb)
      return;

   plen = strlen(path);
   pre = CopyGetPre(cb->flag);
   if (pre == 'z')
      typs = "#define TYPE DCPLX\n#define TCPLX 1\n#define TYPE double\n"
             "#define SCALAR TYPE*";
   else if (pre == 'c')
      typs = "#define TYPE SCPLX\n#define TCPLX 1\n#define TYPE float\n"
             "#define SCALAR TYPE*";
   else if (pre == 'd')
      typs = "#define TYPE DREAL\n#define TREAL 1\n#define TYPE double\n"
             "#define SCALAR TYPE";
   else if (pre == 's')
      typs = "#define TYPE SREAL\n#define TREAL 1\n#define TYPE float\n"
             "#define SCALAR TYPE";

   for (cp=cb; cp; cp = cp->next)
   {
      char *nam, *fnam=NULL, *rt=cp->rout;
      char calp, cbet, fe = 'c';
      FILE *fp;

      calp = CopyGetAlphaC(cp->flag);
      cbet = CopyGetBetaC(cp->flag);
      nam = GetCopyName(cp, 0);
      if (cp->ID)
      {
         char *onam;
         assert(rt);
         for (onam=rt; *onam; onam++);
         fe = onam[-1];
         if (fe != 'c' && fe != 'S' && fe != 's')
            fe = 'c';
         
         len = 10 + strlen(rt);
         cp->rout = malloc(len);
         assert(cp->rout);
         sprintf(cp->rout, "CPYCASES/%s", rt);
      }
      else
      {
         char *gens=cp->genstr;
         cp->rout = "ATL_tmp.c";
         cp->genstr = GetCopyGenStr(cp);
         MMDoGenString(0, cp->genstr);
         free(cp->genstr);
         cp->genstr = gens;
      }
      len = strlen(path) + 1 + strlen(nam) + 2;
      fnam = malloc(len);
      sprintf(fnam, "%s/%s.%c", path, nam, fe);
      fp = fopen(fnam, "w");
      assert(fp);
      fprintf(fp, typs);
      fprintf(fp, "#define ATL_USERCPMM %s\n", nam);
      fclose(fp);
      len = 10 + strlen(cp->rout) + strlen(fnam);
      sp = malloc(len);
      assert(sp);
      sprintf(sp, "cat %s >> %s", cp->rout, fnam);
      assert(!system(sp));
      free(cp->rout);
      cp->rout = rt;
   }
}

void PrintUsage(char *name, int ierr, char *flag)
{
   if (ierr > 0)
      fprintf(stderr, "Bad argument #%d: '%s'\n", ierr,
              flag?flag:"OUT-OF_ARGUMENTS");
   else if (ierr < 0)
      fprintf(stderr, "ERROR: %s\n", flag);
   fprintf(stderr, "USAGE: %s [flags:\n", name);
   fprintf(stderr, "   -F cpyout.sum: repeat for multiple\n");
@skip   fprintf(stderr, "   -v <verb> : set verbosity (1)\n");
   exit(ierr ? ierr : -1);
}

ATL_cpnode_t *GetFlags(int nargs, char **args, char **OUTD)
{
   ATL_cpnode_t *cb=NULL, *cp;
   char *outd=NULL;
   int i;

   for (i=1; i < nargs; i++)
   {
      if (args[i][0] != '-')
         PrintUsage(args[0], i, args[i]);

      switch(args[i][1])
      {
      case 'F':
        if (++i >= nargs)
            PrintUsage(args[0], i-1, NULL);
        if (!cb)
           cb = ReadCPFile(args[i]);
        else
        {
           cp = ATL_LastCPNode(cb);
           cp->next = ReadCPFile(args[i]);
        }
        break;
      default:
         PrintUsage(args[0], i, args[i]);
      }
   }
   if (!outd)
      outd = DupString("tmp/");
   *OUTD = outd;
}

int main(int nargs, char **args)
{
   ATL_cpnode_t *cb;
   char *outd;

   cb = GetFlags(nargs, args, &outd);
   assert(cb);
   GenCopyC(cb, outd);
   free(outd);
   KillAllCPRouts(cb);
   return(0);
@beginskip
   ATL_cpnode_t *gb, *hb;  /* generated & hand-tuned */
   hb = GetFlags(nargs, args);
   gb = YankCPNodesByIntVal(&hb, &(hb->ID), 0);
@endskip
}
@ROUT cpagen
